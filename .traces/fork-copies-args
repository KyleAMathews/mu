c{0: 0 ((default-scope scope-address) <- new (scope literal) (5 literal)) -- nil
c{0: 1 ((x integer) <- copy (4 literal)) -- nil
c{0: 2 (fork (f2 fn) (x integer)) -- nil
c{0: 3 ((x integer) <- copy (0 literal)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 copy ((x integer))
c{1: 2 fork nil
c{1: 3 copy ((x integer))
cn0: ((default-scope scope-address) <- new (scope literal) (5 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (5 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((x integer) <- copy (4 literal)) nil nil
maybe-add: (4 literal)
cn0: checking (x integer)
maybe-add: (x integer)
cn0: location for arg (x integer): 1
sizeof: integer
cn0: (fork (f2 fn) (x integer)) ((x 1)) nil
maybe-add: (f2 fn)
maybe-add: (x integer)
cn0: ((x integer) <- copy (0 literal)) ((x 1)) nil
maybe-add: (0 literal)
cn0: checking (x integer)
maybe-add: (x integer)
cn1: update names ((x 1)) nil
c{0: 0 ((2 integer) <- arg) -- nil
c{1: 0 arg ((2 integer))
cn0: ((2 integer) <- arg) nil nil
cn0: checking (2 integer)
maybe-add: (2 integer)
cn1: update names nil nil
schedule: f1
run: -- nil
run: 1 f1 0: ((default-scope scope-address) <- new (scope literal) (5 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 5))
run: 2 f1 1: ((1 integer) <- copy (4 literal))
run: 4 => (1 integer)
setm: (1 integer) <= 4
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 4
run: -- ((1000 5) (1001 4))
run: 3 f1 2: (fork (f2 fn) (1 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
run: -- ((1000 5) (1001 4))
run: 4 f1 3: ((1 integer) <- copy (0 literal))
run: 0 => (1 integer)
setm: (1 integer) <= 0
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 0
schedule: done with #(tagged routine #hash())
schedule: f2
run: -- ((1000 5) (1001 0))
run: 5 f2 0: ((2 integer) <- arg)
arg: nil 0 (4)
run: 4 => (2 integer)
setm: (2 integer) <= 4
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 4
schedule: done with #(tagged routine #hash())
