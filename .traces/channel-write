cvt0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
cvt0: 1 ((2 integer-address) <- new (integer literal)) -- nil
cvt0: 2 ((2 integer-address deref) <- copy (34 literal)) -- nil
cvt0: 3 ((3 tagged-value-address) <- new-tagged-value (integer literal) (2 integer-address)) -- nil
cvt0: 4 ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref)) -- nil
cvt1: 0 new-channel ((1 channel-address))
cvt1: 1 new ((2 integer-address))
cvt1: 2 copy ((2 integer-address deref))
cvt1: 3 new-tagged-value ((3 tagged-value-address))
cvt1: 4 write ((1 channel-address deref))
schedule: main
run: -- nil
run: main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: new-channel 1: ((1 integer) <- arg)
arg: nil 0 (3)
setm: (1 integer) <= 3
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 3
run: -- ((1000 30) (1001 3))
run: new-channel 2: ((2 tagged-value-array-address) <- new (tagged-value-array literal) (1 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (2 tagged-value-array-address)
setm: (2 tagged-value-array-address) <= 1031
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 tagged-value-array-address) is 1
setm: (2 tagged-value-array-address): setting 1002 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1031 3))
run: new-channel 3: ((3 channel-address) <- new (channel literal))
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1038 => (3 channel-address)
setm: (3 channel-address) <= 1038
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 channel-address) is 1
setm: (3 channel-address): setting 1003 to 1038
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1031 3))
run: new-channel 4: ((4 integer-address) <- get-address (3 channel-address deref) (0 offset))
record-info: (3 channel-address deref) (0 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (3 channel-address deref) (0 offset) => 1038
run: writing to oarg 1038 => (4 integer-address)
setm: (4 integer-address) <= 1038
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1004 to 1038
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1031 3))
run: new-channel 5: ((4 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (4 integer-address deref)
setm: (4 integer-address deref) <= 0
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1000
sz: (1038 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1038
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1038 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1031 3) (1038 0))
run: new-channel 6: ((5 integer-address) <- get-address (3 channel-address deref) (1 offset))
record-info: (3 channel-address deref) (1 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (3 channel-address deref) (1 offset) => 1039
run: writing to oarg 1039 => (5 integer-address)
setm: (5 integer-address) <= 1039
sz: (5 integer-address)
addr: (5 integer-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 integer-address) is 1
setm: (5 integer-address): setting 1005 to 1039
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1031 3) (1038 0))
run: new-channel 7: ((5 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (5 integer-address deref)
setm: (5 integer-address deref) <= 0
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1039 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1039
setm: size of (5 integer-address deref) is 1
setm: (5 integer-address deref): setting 1039 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1031 3) (1038 0) (1039 0))
run: new-channel 8: ((6 tagged-value-array-address-address) <- get-address (3 channel-address deref) (2 offset))
record-info: (3 channel-address deref) (2 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (3 channel-address deref) (2 offset) => 1040
run: writing to oarg 1040 => (6 tagged-value-array-address-address)
setm: (6 tagged-value-array-address-address) <= 1040
sz: (6 tagged-value-array-address-address)
addr: (6 tagged-value-array-address-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-array-address-address) is 1
setm: (6 tagged-value-array-address-address): setting 1006 to 1040
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0))
run: new-channel 9: ((6 tagged-value-array-address-address deref) <- copy (2 tagged-value-array-address))
m: (2 tagged-value-array-address)
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
run: writing to oarg 1031 => (6 tagged-value-array-address-address deref)
setm: (6 tagged-value-array-address-address deref) <= 1031
sz: (6 tagged-value-array-address-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1040 tagged-value-array-address)
addr: (6 tagged-value-array-address-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1040
setm: size of (6 tagged-value-array-address-address deref) is 1
setm: (6 tagged-value-array-address-address deref): setting 1040 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031))
run: new-channel 10: (reply (3 channel-address))
m: (3 channel-address)
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
reply: ((3 channel-address)) ((1 channel-address))
reply: 1038 => (1 channel-address)
setm: (1 channel-address) <= 1038
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1038
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031))
run: main 1: ((2 integer-address) <- new (integer literal))
sizeof: integer
run: writing to oarg 1041 => (2 integer-address)
setm: (2 integer-address) <= 1041
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 2 to 1041
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031))
run: main 2: ((2 integer-address deref) <- copy (34 literal))
run: writing to oarg 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
sz: (1041 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: deref 2 => 1041
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1041 to 34
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34))
run: main 3: ((3 tagged-value-address) <- new-tagged-value (integer literal) (2 integer-address))
m: (2 integer-address)
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34))
run: new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1042 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30))
run: new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer 1041)
setm: (1 type) <= integer
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1042
setm: size of (1 type) is 1
setm: (1 type): setting 1043 to integer
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer))
run: new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1042
sizeof: integer
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1042
setm: size of (2 integer) is 1
setm: (2 integer): setting 1044 to 1
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1))
run: new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1042
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1042
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1045 to t
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t))
run: new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1042
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t))
run: new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1073 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1073
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1042
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1046 to 1073
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073))
run: new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1042
addr: deref 1046 => 1073
record-info: initial base 1073 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1073
run: writing to oarg 1073 => (5 location)
setm: (5 location) <= 1073
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1042
setm: size of (5 location) is 1
setm: (5 location): setting 1047 to 1073
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073))
run: new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1042
run: writing to oarg integer => (5 location deref)
setm: (5 location deref) <= integer
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1042
sz: (1073 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1042
addr: deref 1047 => 1073
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1073 to integer
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1073 integer))
run: new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1042
addr: deref 1046 => 1073
record-info: initial base 1073 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1074
run: writing to oarg 1074 => (6 location)
setm: (6 location) <= 1074
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1042
setm: size of (6 location) is 1
setm: (6 location): setting 1048 to 1074
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer))
run: new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer 1041)
setm: (6 location deref) <= 1041
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1042
sz: (1074 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1042
addr: deref 1048 => 1074
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1074 to 1041
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041))
run: new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1042
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1073 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1073
sz: (3 tagged-value-address)
addr: (3 tagged-value-address)
addr: initial result: 3
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 3 to 1073
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041))
run: main 4: ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1073 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: deref 3 => 1073
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1073 tagged-value)
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041))
run: write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1075 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30))
run: write 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1031 . nil)) #(tagged record (integer 1041 . nil)))
setm: (1 channel) <= #(tagged record (0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
setm: size of (1 channel) is 3
setm: (1 channel): setting 1076 to 0
setm: (1 channel): setting 1077 to 0
setm: (1 channel): setting 1078 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031))
run: write 2: ((4 tagged-value) <- arg)
arg: nil 1 (#(tagged record (0 0 1031 . nil)) #(tagged record (integer 1041 . nil)))
setm: (4 tagged-value) <= #(tagged record (integer 1041 . nil))
sz: (4 tagged-value)
addr: (4 tagged-value)
addr: initial result: 4
addr: incrementing by 1075
setm: size of (4 tagged-value) is 2
setm: (4 tagged-value): setting 1079 to integer
setm: (4 tagged-value): setting 1080 to 1041
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer) (1080 1041))
run: write 3: ((6 tagged-value-array-address) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
record-info: initial base 1076 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (2 offset) => 1078 tagged-value-array-address
m: (1078 tagged-value-array-address global)
sz: (1078 tagged-value-array-address global)
addr: (1078 tagged-value-array-address global)
addr: initial result: 1078
run: writing to oarg 1031 => (6 tagged-value-array-address)
setm: (6 tagged-value-array-address) <= 1031
sz: (6 tagged-value-array-address)
addr: (6 tagged-value-array-address)
addr: initial result: 6
addr: incrementing by 1075
setm: size of (6 tagged-value-array-address) is 1
setm: (6 tagged-value-array-address): setting 1081 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer) (1080 1041) (1081 1031))
run: write 4: ((7 integer-address) <- get-address (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
record-info: initial base 1076 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel) (1 offset) => 1077
run: writing to oarg 1077 => (7 integer-address)
setm: (7 integer-address) <= 1077
sz: (7 integer-address)
addr: (7 integer-address)
addr: initial result: 7
addr: incrementing by 1075
setm: size of (7 integer-address) is 1
setm: (7 integer-address): setting 1082 to 1077
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer) (1080 1041) (1081 1031) (1082 1077))
run: write 5: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref))
array-info: (6 tagged-value-array-address deref) (7 integer-address deref)
addr: (6 tagged-value-array-address deref)
addr: initial result: 6
addr: incrementing by 1075
addr: deref 1081 => 1031
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
array-info: initial base 1031 type ((address t) (elem tagged-value-array) (size 1))
array-info: (6 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1075
sz: (1031 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1075
addr: deref 1081 => 1031
array-info: array-len of (6 tagged-value-array-address deref) is 3
index-address: (6 tagged-value-array-address deref) (7 integer-address deref) => 1032
run: writing to oarg 1032 => (8 tagged-value-address)
setm: (8 tagged-value-address) <= 1032
sz: (8 tagged-value-address)
addr: (8 tagged-value-address)
addr: initial result: 8
addr: incrementing by 1075
setm: size of (8 tagged-value-address) is 1
setm: (8 tagged-value-address): setting 1083 to 1032
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: write 6: ((8 tagged-value-address deref) <- copy (4 tagged-value))
m: (4 tagged-value)
sz: (4 tagged-value)
addr: (4 tagged-value)
addr: initial result: 4
addr: incrementing by 1075
sz: (4 tagged-value)
run: writing to oarg #(tagged record (integer 1041 . nil)) => (8 tagged-value-address deref)
setm: (8 tagged-value-address deref) <= #(tagged record (integer 1041 . nil))
sz: (8 tagged-value-address deref)
m: (8 location)
sz: (8 location)
addr: (8 location)
addr: initial result: 8
addr: incrementing by 1075
sz: (1032 tagged-value)
addr: (8 tagged-value-address deref)
addr: initial result: 8
addr: incrementing by 1075
addr: deref 1083 => 1032
setm: size of (8 tagged-value-address deref) is 2
setm: (8 tagged-value-address deref): setting 1032 to integer
setm: (8 tagged-value-address deref): setting 1033 to 1041
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer) (1033 1041) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: write 7: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
add: 0 1
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
run: writing to oarg 1 => (7 integer-address deref)
setm: (7 integer-address deref) <= 1
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
setm: size of (7 integer-address deref) is 1
setm: (7 integer-address deref): setting 1077 to 1
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer) (1033 1041) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: write 8: (reply (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
sz: (1 channel)
reply: ((1 channel)) ((1 channel-address deref))
reply: #(tagged record (0 1 1031 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (0 1 1031 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
setm: size of (1 channel-address deref) is 3
setm: (1 channel-address deref): setting 1038 to 0
setm: (1 channel-address deref): setting 1039 to 1
setm: (1 channel-address deref): setting 1040 to 1031
