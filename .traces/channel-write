c{0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
c{0: 1 ((2 integer-address) <- new (integer literal)) -- nil
c{0: 2 ((2 integer-address deref) <- copy (34 literal)) -- nil
c{0: 3 ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address)) -- nil
c{0: 4 ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref)) -- nil
c{0: 5 ((4 integer) <- get (1 channel-address deref) (first-full offset)) -- nil
c{0: 6 ((5 integer) <- get (1 channel-address deref) (first-free offset)) -- nil
c{1: 0 new-channel ((1 channel-address))
c{1: 1 new ((2 integer-address))
c{1: 2 copy ((2 integer-address deref))
c{1: 3 new-tagged-value ((3 tagged-value-address))
c{1: 4 write ((1 channel-address deref))
c{1: 5 get ((4 integer))
c{1: 6 get ((5 integer))
cn0: ((1 channel-address) <- new-channel (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- new (integer literal)) nil nil
maybe-add: (integer literal)
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (34 literal)) nil nil
maybe-add: (34 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address)) nil nil
maybe-add: (integer-address literal)
maybe-add: (2 integer-address)
cn0: checking (3 tagged-value-address)
maybe-add: (3 tagged-value-address)
cn0: ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref)) nil nil
maybe-add: (1 channel-address deref)
maybe-add: (3 tagged-value-address deref)
cn0: checking (1 channel-address deref)
maybe-add: (1 channel-address deref)
cn0: ((4 integer) <- get (1 channel-address deref) (first-full offset)) nil nil
cn0: field-access first-full
cn0: field-access deref
cn0: new field; computing location
cn0: field location 2
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel-address deref) (first-free offset)) ((first-full 2)) ((first-full t))
cn0: field-access first-free
cn0: field-access deref
cn0: new field; computing location
cn0: field location 3
cn0: checking (5 integer)
maybe-add: (5 integer)
cn1: update names ((first-free 3) (first-full 2)) ((first-free t) (first-full t))
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 integer) <- arg)
arg: nil 0 (3)
setm: (1 integer) <= 3
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 3
run: -- ((1000 30) (1001 3))
run: 4 new-channel 2: ((2 tagged-value-array-address) <- new (tagged-value-array literal) (1 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (2 tagged-value-array-address)
setm: (2 tagged-value-array-address) <= 1031
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 tagged-value-array-address) is 1
setm: (2 tagged-value-array-address): setting 1002 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1031 3))
run: 5 new-channel 3: ((3 channel-address) <- new (channel literal))
sizeof: channel
sizeof: boolean
sizeof: boolean
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1038 => (3 channel-address)
setm: (3 channel-address) <= 1038
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 channel-address) is 1
setm: (3 channel-address): setting 1003 to 1038
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1031 3))
run: 6 new-channel 4: ((4 integer-address) <- get-address (3 channel-address deref) (2 offset))
record-info: (3 channel-address deref) (2 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (2 offset) => 1040
run: writing to oarg 1040 => (4 integer-address)
setm: (4 integer-address) <= 1040
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1004 to 1040
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1031 3))
run: 7 new-channel 5: ((4 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (4 integer-address deref)
setm: (4 integer-address deref) <= 0
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1000
sz: (1040 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1040
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1040 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1031 3) (1040 0))
run: 8 new-channel 6: ((5 integer-address) <- get-address (3 channel-address deref) (3 offset))
record-info: (3 channel-address deref) (3 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (3 offset) => 1041
run: writing to oarg 1041 => (5 integer-address)
setm: (5 integer-address) <= 1041
sz: (5 integer-address)
addr: (5 integer-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 integer-address) is 1
setm: (5 integer-address): setting 1005 to 1041
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1031 3) (1040 0))
run: 9 new-channel 7: ((5 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (5 integer-address deref)
setm: (5 integer-address deref) <= 0
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1041 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1041
setm: size of (5 integer-address deref) is 1
setm: (5 integer-address deref): setting 1041 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1031 3) (1040 0) (1041 0))
run: 10 new-channel 8: ((6 tagged-value-array-address-address) <- get-address (3 channel-address deref) (4 offset))
record-info: (3 channel-address deref) (4 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (4 offset) => 1042
run: writing to oarg 1042 => (6 tagged-value-array-address-address)
setm: (6 tagged-value-array-address-address) <= 1042
sz: (6 tagged-value-array-address-address)
addr: (6 tagged-value-array-address-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-array-address-address) is 1
setm: (6 tagged-value-array-address-address): setting 1006 to 1042
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0))
run: 11 new-channel 9: ((6 tagged-value-array-address-address deref) <- copy (2 tagged-value-array-address))
m: (2 tagged-value-array-address)
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
run: writing to oarg 1031 => (6 tagged-value-array-address-address deref)
setm: (6 tagged-value-array-address-address deref) <= 1031
sz: (6 tagged-value-array-address-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1042 tagged-value-array-address)
addr: (6 tagged-value-array-address-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1042
setm: size of (6 tagged-value-array-address-address deref) is 1
setm: (6 tagged-value-array-address-address deref): setting 1042 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 12 new-channel 10: (reply (3 channel-address))
m: (3 channel-address)
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
reply: ((3 channel-address)) ((1 channel-address))
reply: 1038 => (1 channel-address)
setm: (1 channel-address) <= 1038
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1038
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 13 main 1: ((2 integer-address) <- new (integer literal))
sizeof: integer
run: writing to oarg 1043 => (2 integer-address)
setm: (2 integer-address) <= 1043
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 2 to 1043
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 14 main 2: ((2 integer-address deref) <- copy (34 literal))
run: writing to oarg 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
sz: (1043 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: deref 2 => 1043
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1043 to 34
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34))
run: 15 main 3: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address))
m: (2 integer-address)
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34))
run: 16 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1044 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30))
run: 17 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 1043)
setm: (1 type) <= integer-address
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1044
setm: size of (1 type) is 1
setm: (1 type): setting 1045 to integer-address
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address))
run: 18 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1044
sizeof: integer-address
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1044
setm: size of (2 integer) is 1
setm: (2 integer): setting 1046 to 1
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1))
run: 19 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1044
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1044
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1047 to t
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t))
run: 20 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1044
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t))
run: 21 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1075 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1075
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1044
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1048 to 1075
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075))
run: 22 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1044
addr: deref 1048 => 1075
record-info: initial base 1075 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1075
run: writing to oarg 1075 => (5 location)
setm: (5 location) <= 1075
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1044
setm: size of (5 location) is 1
setm: (5 location): setting 1049 to 1075
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075))
run: 23 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1044
run: writing to oarg integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1044
sz: (1075 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1044
addr: deref 1049 => 1075
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1075 to integer-address
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1075 integer-address))
run: 24 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1044
addr: deref 1048 => 1075
record-info: initial base 1075 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1076
run: writing to oarg 1076 => (6 location)
setm: (6 location) <= 1076
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1044
setm: size of (6 location) is 1
setm: (6 location): setting 1050 to 1076
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address))
run: 25 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 1043)
setm: (6 location deref) <= 1043
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1044
sz: (1076 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1044
addr: deref 1050 => 1076
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1076 to 1043
run: -- ((1 1038) (2 1043) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043))
run: 26 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1044
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1075 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1075
sz: (3 tagged-value-address)
addr: (3 tagged-value-address)
addr: initial result: 3
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 3 to 1075
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043))
run: 27 main 4: ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1075 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: deref 3 => 1075
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1075 tagged-value)
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043))
run: 28 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1077 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30))
run: 29 write 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1031 . nil)) #(tagged record (integer-address 1043 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1077
setm: size of (1 channel) is 5
setm: (1 channel): setting 1078 to nil
setm: (1 channel): setting 1079 to nil
setm: (1 channel): setting 1080 to 0
setm: (1 channel): setting 1081 to 0
setm: (1 channel): setting 1082 to 1031
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031))
run: 30 write 2: ((6 tagged-value) <- arg)
arg: nil 1 (#(tagged record (nil nil 0 0 1031 . nil)) #(tagged record (integer-address 1043 . nil)))
setm: (6 tagged-value) <= #(tagged record (integer-address 1043 . nil))
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1077
setm: size of (6 tagged-value) is 2
setm: (6 tagged-value): setting 1083 to integer-address
setm: (6 tagged-value): setting 1084 to 1043
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043))
run: 31 write 3: ((8 boolean) <- full? (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1077
sz: (1 channel)
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043))
run: 32 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1108 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30))
run: 33 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1031 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1108
setm: size of (1 channel) is 5
setm: (1 channel): setting 1109 to nil
setm: (1 channel): setting 1110 to nil
setm: (1 channel): setting 1111 to 0
setm: (1 channel): setting 1112 to 0
setm: (1 channel): setting 1113 to 1031
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031))
run: 34 full? 2: ((6 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1108
record-info: initial base 1109 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1111 integer
m: (1111 integer global)
sz: (1111 integer global)
addr: (1111 integer global)
addr: initial result: 1111
run: writing to oarg 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1108
setm: size of (6 integer) is 1
setm: (6 integer): setting 1114 to 0
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0))
run: 35 full? 3: ((7 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1108
record-info: initial base 1109 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1112 integer
m: (1112 integer global)
sz: (1112 integer global)
addr: (1112 integer global)
addr: initial result: 1112
run: writing to oarg 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1108
setm: size of (7 integer) is 1
setm: (7 integer): setting 1115 to 0
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 0))
run: 36 full? 4: ((8 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1108
record-info: initial base 1109 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1113 tagged-value-array-address
m: (1113 tagged-value-array-address global)
sz: (1113 tagged-value-array-address global)
addr: (1113 tagged-value-array-address global)
addr: initial result: 1113
run: writing to oarg 1031 => (8 tagged-value-array-address)
setm: (8 tagged-value-array-address) <= 1031
sz: (8 tagged-value-array-address)
addr: (8 tagged-value-array-address)
addr: initial result: 8
addr: incrementing by 1108
setm: size of (8 tagged-value-array-address) is 1
setm: (8 tagged-value-array-address): setting 1116 to 1031
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 0) (1116 1031))
run: 37 full? 5: ((9 integer) <- len (8 tagged-value-array-address deref))
array-len: (8 tagged-value-array-address deref)
m: (8 integer-address deref)
sz: (8 integer-address deref)
m: (8 location)
sz: (8 location)
addr: (8 location)
addr: initial result: 8
addr: incrementing by 1108
sz: (1031 integer)
addr: (8 integer-address deref)
addr: initial result: 8
addr: incrementing by 1108
addr: deref 1116 => 1031
run: writing to oarg 3 => (9 integer)
setm: (9 integer) <= 3
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1108
setm: size of (9 integer) is 1
setm: (9 integer): setting 1117 to 3
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 0) (1116 1031) (1117 3))
run: 38 full? 6: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1108
add: 0 1
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1108
run: writing to oarg 1 => (7 integer)
setm: (7 integer) <= 1
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1108
setm: size of (7 integer) is 1
setm: (7 integer): setting 1115 to 1
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3))
run: 39 full? 7: ((10 boolean) <- lt (7 integer) (9 integer))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1108
m: (9 integer)
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1108
run: writing to oarg t => (10 boolean)
setm: (10 boolean) <= t
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1108
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1118 to t
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 40 full? 8: (jump-if (10 boolean) (1 offset))
m: (10 boolean)
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1108
jump: checking that t is t
jump: jumping to 10
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 41 full? 10: ((11 boolean) <- eq (6 integer) (7 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1108
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1108
run: writing to oarg nil => (11 boolean)
setm: (11 boolean) <= nil
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1108
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1119 to nil
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 42 full? 11: (reply (11 boolean))
m: (11 boolean)
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1108
reply: ((11 boolean)) ((8 boolean))
reply: nil => (8 boolean)
setm: (8 boolean) <= nil
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1077
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1085 to nil
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 43 write 4: (jump-unless (8 boolean) (3 offset))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1077
jump: checking that nil is not t
jump: jumping to 8
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 44 write 8: ((10 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1077
record-info: initial base 1078 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1082 tagged-value-array-address
m: (1082 tagged-value-array-address global)
sz: (1082 tagged-value-array-address global)
addr: (1082 tagged-value-array-address global)
addr: initial result: 1082
run: writing to oarg 1031 => (10 tagged-value-array-address)
setm: (10 tagged-value-array-address) <= 1031
sz: (10 tagged-value-array-address)
addr: (10 tagged-value-array-address)
addr: initial result: 10
addr: incrementing by 1077
setm: size of (10 tagged-value-array-address) is 1
setm: (10 tagged-value-array-address): setting 1087 to 1031
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 45 write 9: ((11 integer-address) <- get-address (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1077
record-info: initial base 1078 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (3 offset) => 1081
run: writing to oarg 1081 => (11 integer-address)
setm: (11 integer-address) <= 1081
sz: (11 integer-address)
addr: (11 integer-address)
addr: initial result: 11
addr: incrementing by 1077
setm: size of (11 integer-address) is 1
setm: (11 integer-address): setting 1088 to 1081
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1088 1081) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 46 write 10: ((12 tagged-value-address) <- index-address (10 tagged-value-array-address deref) (11 integer-address deref))
array-info: (10 tagged-value-array-address deref) (11 integer-address deref)
addr: (10 tagged-value-array-address deref)
addr: initial result: 10
addr: incrementing by 1077
addr: deref 1087 => 1031
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1077
sz: (1081 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1077
addr: deref 1088 => 1081
array-info: initial base 1031 type ((address t) (elem tagged-value-array) (size 1))
array-info: (10 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (10 tagged-value-array-address deref)
m: (10 integer-address deref)
sz: (10 integer-address deref)
m: (10 location)
sz: (10 location)
addr: (10 location)
addr: initial result: 10
addr: incrementing by 1077
sz: (1031 integer)
addr: (10 integer-address deref)
addr: initial result: 10
addr: incrementing by 1077
addr: deref 1087 => 1031
array-info: array-len of (10 tagged-value-array-address deref) is 3
index-address: (10 tagged-value-array-address deref) (11 integer-address deref) => 1032
run: writing to oarg 1032 => (12 tagged-value-address)
setm: (12 tagged-value-address) <= 1032
sz: (12 tagged-value-address)
addr: (12 tagged-value-address)
addr: initial result: 12
addr: incrementing by 1077
setm: size of (12 tagged-value-address) is 1
setm: (12 tagged-value-address): setting 1089 to 1032
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1088 1081) (1089 1032) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 47 write 11: ((12 tagged-value-address deref) <- copy (6 tagged-value))
m: (6 tagged-value)
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1077
sz: (6 tagged-value)
run: writing to oarg #(tagged record (integer-address 1043 . nil)) => (12 tagged-value-address deref)
setm: (12 tagged-value-address deref) <= #(tagged record (integer-address 1043 . nil))
sz: (12 tagged-value-address deref)
m: (12 location)
sz: (12 location)
addr: (12 location)
addr: initial result: 12
addr: incrementing by 1077
sz: (1032 tagged-value)
addr: (12 tagged-value-address deref)
addr: initial result: 12
addr: incrementing by 1077
addr: deref 1089 => 1032
setm: size of (12 tagged-value-address deref) is 2
setm: (12 tagged-value-address deref): setting 1032 to integer-address
setm: (12 tagged-value-address deref): setting 1033 to 1043
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 0) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1088 1081) (1089 1032) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 48 write 12: ((11 integer-address deref) <- add (11 integer-address deref) (1 literal))
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1077
sz: (1081 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1077
addr: deref 1088 => 1081
add: 0 1
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1077
sz: (1081 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1077
addr: deref 1088 => 1081
run: writing to oarg 1 => (11 integer-address deref)
setm: (11 integer-address deref) <= 1
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1077
sz: (1081 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1077
addr: deref 1088 => 1081
setm: size of (11 integer-address deref) is 1
setm: (11 integer-address deref): setting 1081 to 1
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1088 1081) (1089 1032) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 49 write 13: ((13 integer) <- len (10 tagged-value-array-address deref))
array-len: (10 tagged-value-array-address deref)
m: (10 integer-address deref)
sz: (10 integer-address deref)
m: (10 location)
sz: (10 location)
addr: (10 location)
addr: initial result: 10
addr: incrementing by 1077
sz: (1031 integer)
addr: (10 integer-address deref)
addr: initial result: 10
addr: incrementing by 1077
addr: deref 1087 => 1031
run: writing to oarg 3 => (13 integer)
setm: (13 integer) <= 3
sz: (13 integer)
addr: (13 integer)
addr: initial result: 13
addr: incrementing by 1077
setm: size of (13 integer) is 1
setm: (13 integer): setting 1090 to 3
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1088 1081) (1089 1032) (1090 3) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 50 write 14: ((14 boolean) <- lt (11 integer-address deref) (13 integer))
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1077
sz: (1081 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1077
addr: deref 1088 => 1081
m: (13 integer)
sz: (13 integer)
addr: (13 integer)
addr: initial result: 13
addr: incrementing by 1077
run: writing to oarg t => (14 boolean)
setm: (14 boolean) <= t
sz: (14 boolean)
addr: (14 boolean)
addr: initial result: 14
addr: incrementing by 1077
setm: size of (14 boolean) is 1
setm: (14 boolean): setting 1091 to t
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1088 1081) (1089 1032) (1090 3) (1091 t) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 51 write 15: (jump-if (14 boolean) (1 offset))
m: (14 boolean)
sz: (14 boolean)
addr: (14 boolean)
addr: initial result: 14
addr: incrementing by 1077
jump: checking that t is t
jump: jumping to 17
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1087 1031) (1088 1081) (1089 1032) (1090 3) (1091 t) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 52 write 17: ((9 boolean-address) <- get-address (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1077
record-info: initial base 1078 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (0 offset) => 1078
run: writing to oarg 1078 => (9 boolean-address)
setm: (9 boolean-address) <= 1078
sz: (9 boolean-address)
addr: (9 boolean-address)
addr: initial result: 9
addr: incrementing by 1077
setm: size of (9 boolean-address) is 1
setm: (9 boolean-address): setting 1086 to 1078
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1086 1078) (1087 1031) (1088 1081) (1089 1032) (1090 3) (1091 t) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 53 write 18: ((9 boolean-address deref) <- copy (t literal))
run: writing to oarg t => (9 boolean-address deref)
setm: (9 boolean-address deref) <= t
sz: (9 boolean-address deref)
m: (9 location)
sz: (9 location)
addr: (9 location)
addr: initial result: 9
addr: incrementing by 1077
sz: (1078 boolean)
addr: (9 boolean-address deref)
addr: initial result: 9
addr: incrementing by 1077
addr: deref 1086 => 1078
setm: size of (9 boolean-address deref) is 1
setm: (9 boolean-address deref): setting 1078 to t
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1040 0) (1041 0) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 t) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1086 1078) (1087 1031) (1088 1081) (1089 1032) (1090 3) (1091 t) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 54 write 19: (reply (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1077
sz: (1 channel)
reply: ((1 channel)) ((1 channel-address deref))
reply: #(tagged record (t nil 0 1 1031 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (t nil 0 1 1031 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
setm: size of (1 channel-address deref) is 5
setm: (1 channel-address deref): setting 1038 to t
setm: (1 channel-address deref): setting 1039 to nil
setm: (1 channel-address deref): setting 1040 to 0
setm: (1 channel-address deref): setting 1041 to 1
setm: (1 channel-address deref): setting 1042 to 1031
run: -- ((1 1038) (2 1043) (3 1075) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1038 t) (1040 0) (1041 1) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 t) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1086 1078) (1087 1031) (1088 1081) (1089 1032) (1090 3) (1091 t) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 55 main 5: ((4 integer) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel-address deref) (2 offset) => 1040 integer
m: (1040 integer global)
sz: (1040 integer global)
addr: (1040 integer global)
addr: initial result: 1040
run: writing to oarg 0 => (4 integer)
setm: (4 integer) <= 0
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 0
run: -- ((1 1038) (2 1043) (3 1075) (4 0) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1032 integer-address) (1033 1043) (1038 t) (1040 0) (1041 1) (1042 1031) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 t) (1080 0) (1081 1) (1082 1031) (1083 integer-address) (1084 1043) (1086 1078) (1087 1031) (1088 1081) (1089 1032) (1090 3) (1091 t) (1108 30) (1111 0) (1112 0) (1113 1031) (1114 0) (1115 1) (1116 1031) (1117 3) (1118 t))
run: 56 main 6: ((5 integer) <- get (1 channel-address deref) (3 offset))
record-info: (1 channel-address deref) (3 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel-address deref) (3 offset) => 1041 integer
m: (1041 integer global)
sz: (1041 integer global)
addr: (1041 integer global)
addr: initial result: 1041
run: writing to oarg 1 => (5 integer)
setm: (5 integer) <= 1
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 1
