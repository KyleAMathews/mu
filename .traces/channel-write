c{0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
c{0: 1 ((2 integer-address) <- new (integer literal)) -- nil
c{0: 2 ((2 integer-address deref) <- copy (34 literal)) -- nil
c{0: 3 ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address)) -- nil
c{0: 4 ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref)) -- nil
c{0: 5 ((4 integer) <- get (1 channel-address deref) (first-full offset)) -- nil
c{0: 6 ((5 integer) <- get (1 channel-address deref) (first-free offset)) -- nil
c{1: 0 new-channel ((1 channel-address))
c{1: 1 new ((2 integer-address))
c{1: 2 copy ((2 integer-address deref))
c{1: 3 new-tagged-value ((3 tagged-value-address))
c{1: 4 write ((1 channel-address deref))
c{1: 5 get ((4 integer))
c{1: 6 get ((5 integer))
cn0: ((1 channel-address) <- new-channel (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- new (integer literal)) nil nil
maybe-add: (integer literal)
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (34 literal)) nil nil
maybe-add: (34 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address)) nil nil
maybe-add: (integer-address literal)
maybe-add: (2 integer-address)
cn0: checking (3 tagged-value-address)
maybe-add: (3 tagged-value-address)
cn0: ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref)) nil nil
maybe-add: (1 channel-address deref)
maybe-add: (3 tagged-value-address deref)
cn0: checking (1 channel-address deref)
maybe-add: (1 channel-address deref)
cn0: ((4 integer) <- get (1 channel-address deref) (first-full offset)) nil nil
cn0: field-access first-full
cn0: field-access deref
cn0: new field; computing location
cn0: field location 2
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel-address deref) (first-free offset)) ((first-full 2)) ((first-full t))
cn0: field-access first-free
cn0: field-access deref
cn0: new field; computing location
cn0: field location 3
cn0: checking (5 integer)
maybe-add: (5 integer)
cn1: update names ((first-free 3) (first-full 2)) ((first-free t) (first-full t))
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 channel-address) <- new (channel literal))
sizeof: channel
sizeof: boolean
sizeof: boolean
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1001 to 1031
run: -- ((1000 30) (1001 1031))
run: 4 new-channel 2: ((2 integer-address) <- get-address (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (2 offset) => 1033
run: writing to oarg 1033 => (2 integer-address)
setm: (2 integer-address) <= 1033
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 1002 to 1033
run: -- ((1000 30) (1001 1031) (1002 1033))
run: 5 new-channel 3: ((2 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (2 integer-address deref)
setm: (2 integer-address deref) <= 0
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1000
sz: (1033 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: incrementing by 1000
addr: deref 1002 => 1033
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1033 to 0
run: -- ((1000 30) (1001 1031) (1002 1033) (1033 0))
run: 6 new-channel 4: ((3 integer-address) <- get-address (1 channel-address deref) (3 offset))
record-info: (1 channel-address deref) (3 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (3 offset) => 1034
run: writing to oarg 1034 => (3 integer-address)
setm: (3 integer-address) <= 1034
sz: (3 integer-address)
addr: (3 integer-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 1003 to 1034
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1033 0))
run: 7 new-channel 5: ((3 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (3 integer-address deref)
setm: (3 integer-address deref) <= 0
sz: (3 integer-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1000
sz: (1034 integer)
addr: (3 integer-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1034
setm: size of (3 integer-address deref) is 1
setm: (3 integer-address deref): setting 1034 to 0
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1033 0) (1034 0))
run: 8 new-channel 6: ((4 integer) <- arg)
arg: nil 0 (3)
setm: (4 integer) <= 3
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 3
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 3) (1033 0) (1034 0))
run: 9 new-channel 7: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
add: 3 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
run: writing to oarg 4 => (4 integer)
setm: (4 integer) <= 4
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 4
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1033 0) (1034 0))
run: 10 new-channel 8: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (4 offset))
record-info: (1 channel-address deref) (4 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (4 offset) => 1035
run: writing to oarg 1035 => (5 tagged-value-array-address-address)
setm: (5 tagged-value-array-address-address) <= 1035
sz: (5 tagged-value-array-address-address)
addr: (5 tagged-value-array-address-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 tagged-value-array-address-address) is 1
setm: (5 tagged-value-array-address-address): setting 1005 to 1035
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0))
run: 11 new-channel 9: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1036 => (5 tagged-value-array-address-address deref)
setm: (5 tagged-value-array-address-address deref) <= 1036
sz: (5 tagged-value-array-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1035 tagged-value-array-address)
addr: (5 tagged-value-array-address-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1035
setm: size of (5 tagged-value-array-address-address deref) is 1
setm: (5 tagged-value-array-address-address deref): setting 1035 to 1036
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4))
run: 12 new-channel 10: (reply (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
reply: ((1 channel-address)) ((1 channel-address))
reply: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1031
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4))
run: 13 main 1: ((2 integer-address) <- new (integer literal))
sizeof: integer
run: writing to oarg 1045 => (2 integer-address)
setm: (2 integer-address) <= 1045
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 2 to 1045
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4))
run: 14 main 2: ((2 integer-address deref) <- copy (34 literal))
run: writing to oarg 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
sz: (1045 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: deref 2 => 1045
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1045 to 34
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34))
run: 15 main 3: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address))
m: (2 integer-address)
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34))
run: 16 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1046 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30))
run: 17 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 1045)
setm: (1 type) <= integer-address
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1046
setm: size of (1 type) is 1
setm: (1 type): setting 1047 to integer-address
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address))
run: 18 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1046
sizeof: integer-address
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1046
setm: size of (2 integer) is 1
setm: (2 integer): setting 1048 to 1
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1))
run: 19 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1046
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1046
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1049 to t
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t))
run: 20 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1046
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t))
run: 21 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1077 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1077
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1046
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1050 to 1077
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077))
run: 22 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1046
addr: deref 1050 => 1077
record-info: initial base 1077 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1077
run: writing to oarg 1077 => (5 location)
setm: (5 location) <= 1077
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1046
setm: size of (5 location) is 1
setm: (5 location): setting 1051 to 1077
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077))
run: 23 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1046
run: writing to oarg integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1046
sz: (1077 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1046
addr: deref 1051 => 1077
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1077 to integer-address
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1077 integer-address))
run: 24 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1046
addr: deref 1050 => 1077
record-info: initial base 1077 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1078
run: writing to oarg 1078 => (6 location)
setm: (6 location) <= 1078
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1046
setm: size of (6 location) is 1
setm: (6 location): setting 1052 to 1078
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address))
run: 25 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 1045)
setm: (6 location deref) <= 1045
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1046
sz: (1078 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1046
addr: deref 1052 => 1078
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1078 to 1045
run: -- ((1 1031) (2 1045) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045))
run: 26 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1046
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1077 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1077
sz: (3 tagged-value-address)
addr: (3 tagged-value-address)
addr: initial result: 3
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 3 to 1077
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045))
run: 27 main 4: ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1077 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: deref 3 => 1077
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1077 tagged-value)
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045))
run: 28 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1079 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30))
run: 29 write 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1036 . nil)) #(tagged record (integer-address 1045 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1036 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1079
setm: size of (1 channel) is 5
setm: (1 channel): setting 1080 to nil
setm: (1 channel): setting 1081 to nil
setm: (1 channel): setting 1082 to 0
setm: (1 channel): setting 1083 to 0
setm: (1 channel): setting 1084 to 1036
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036))
run: 30 write 2: ((6 tagged-value) <- arg)
arg: nil 1 (#(tagged record (nil nil 0 0 1036 . nil)) #(tagged record (integer-address 1045 . nil)))
setm: (6 tagged-value) <= #(tagged record (integer-address 1045 . nil))
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1079
setm: size of (6 tagged-value) is 2
setm: (6 tagged-value): setting 1085 to integer-address
setm: (6 tagged-value): setting 1086 to 1045
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045))
run: 31 write 3: ((8 boolean) <- full? (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1079
sz: (1 channel)
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045))
run: 32 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1110 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30))
run: 33 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1036 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1036 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1110
setm: size of (1 channel) is 5
setm: (1 channel): setting 1111 to nil
setm: (1 channel): setting 1112 to nil
setm: (1 channel): setting 1113 to 0
setm: (1 channel): setting 1114 to 0
setm: (1 channel): setting 1115 to 1036
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036))
run: 34 full? 2: ((6 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1110
record-info: initial base 1111 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1114 integer
m: (1114 integer global)
sz: (1114 integer global)
addr: (1114 integer global)
addr: initial result: 1114
run: writing to oarg 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1110
setm: size of (6 integer) is 1
setm: (6 integer): setting 1116 to 0
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 0))
run: 35 full? 3: ((7 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1110
record-info: initial base 1111 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1115 tagged-value-array-address
m: (1115 tagged-value-array-address global)
sz: (1115 tagged-value-array-address global)
addr: (1115 tagged-value-array-address global)
addr: initial result: 1115
run: writing to oarg 1036 => (7 tagged-value-array-address)
setm: (7 tagged-value-array-address) <= 1036
sz: (7 tagged-value-array-address)
addr: (7 tagged-value-array-address)
addr: initial result: 7
addr: incrementing by 1110
setm: size of (7 tagged-value-array-address) is 1
setm: (7 tagged-value-array-address): setting 1117 to 1036
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 0) (1117 1036))
run: 36 full? 4: ((8 integer) <- len (7 tagged-value-array-address deref))
array-len: (7 tagged-value-array-address deref)
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1110
sz: (1036 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1110
addr: deref 1117 => 1036
run: writing to oarg 4 => (8 integer)
setm: (8 integer) <= 4
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1110
setm: size of (8 integer) is 1
setm: (8 integer): setting 1118 to 4
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 0) (1117 1036) (1118 4))
run: 37 full? 5: ((6 integer) <- add (6 integer) (1 literal))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1110
add: 0 1
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1110
run: writing to oarg 1 => (6 integer)
setm: (6 integer) <= 1
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1110
setm: size of (6 integer) is 1
setm: (6 integer): setting 1116 to 1
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4))
run: 38 full? 6: ((9 boolean) <- lt (6 integer) (8 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1110
m: (8 integer)
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1110
run: writing to oarg t => (9 boolean)
setm: (9 boolean) <= t
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1110
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1119 to t
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t))
run: 39 full? 7: (jump-if (9 boolean) (1 offset))
m: (9 boolean)
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1110
jump: checking that t is t
jump: jumping to 9
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t))
run: 40 full? 9: ((10 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1110
record-info: initial base 1111 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1113 integer
m: (1113 integer global)
sz: (1113 integer global)
addr: (1113 integer global)
addr: initial result: 1113
run: writing to oarg 0 => (10 integer)
setm: (10 integer) <= 0
sz: (10 integer)
addr: (10 integer)
addr: initial result: 10
addr: incrementing by 1110
setm: size of (10 integer) is 1
setm: (10 integer): setting 1120 to 0
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 41 full? 10: ((11 boolean) <- eq (10 integer) (6 integer))
m: (10 integer)
sz: (10 integer)
addr: (10 integer)
addr: initial result: 10
addr: incrementing by 1110
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1110
run: writing to oarg nil => (11 boolean)
setm: (11 boolean) <= nil
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1110
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1121 to nil
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 42 full? 11: (reply (11 boolean))
m: (11 boolean)
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1110
reply: ((11 boolean)) ((8 boolean))
reply: nil => (8 boolean)
setm: (8 boolean) <= nil
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1079
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1087 to nil
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 43 write 4: (jump-unless (8 boolean) (3 offset))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1079
jump: checking that nil is not t
jump: jumping to 8
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 44 write 8: ((10 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1079
record-info: initial base 1080 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1084 tagged-value-array-address
m: (1084 tagged-value-array-address global)
sz: (1084 tagged-value-array-address global)
addr: (1084 tagged-value-array-address global)
addr: initial result: 1084
run: writing to oarg 1036 => (10 tagged-value-array-address)
setm: (10 tagged-value-array-address) <= 1036
sz: (10 tagged-value-array-address)
addr: (10 tagged-value-array-address)
addr: initial result: 10
addr: incrementing by 1079
setm: size of (10 tagged-value-array-address) is 1
setm: (10 tagged-value-array-address): setting 1089 to 1036
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 45 write 9: ((11 integer-address) <- get-address (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1079
record-info: initial base 1080 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (3 offset) => 1083
run: writing to oarg 1083 => (11 integer-address)
setm: (11 integer-address) <= 1083
sz: (11 integer-address)
addr: (11 integer-address)
addr: initial result: 11
addr: incrementing by 1079
setm: size of (11 integer-address) is 1
setm: (11 integer-address): setting 1090 to 1083
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1090 1083) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 46 write 10: ((12 tagged-value-address) <- index-address (10 tagged-value-array-address deref) (11 integer-address deref))
array-info: (10 tagged-value-array-address deref) (11 integer-address deref)
addr: (10 tagged-value-array-address deref)
addr: initial result: 10
addr: incrementing by 1079
addr: deref 1089 => 1036
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1079
sz: (1083 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1079
addr: deref 1090 => 1083
array-info: initial base 1036 type ((address t) (elem tagged-value-array) (size 1))
array-info: (10 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (10 tagged-value-array-address deref)
m: (10 integer-address deref)
sz: (10 integer-address deref)
m: (10 location)
sz: (10 location)
addr: (10 location)
addr: initial result: 10
addr: incrementing by 1079
sz: (1036 integer)
addr: (10 integer-address deref)
addr: initial result: 10
addr: incrementing by 1079
addr: deref 1089 => 1036
array-info: array-len of (10 tagged-value-array-address deref) is 4
index-address: (10 tagged-value-array-address deref) (11 integer-address deref) => 1037
run: writing to oarg 1037 => (12 tagged-value-address)
setm: (12 tagged-value-address) <= 1037
sz: (12 tagged-value-address)
addr: (12 tagged-value-address)
addr: initial result: 12
addr: incrementing by 1079
setm: size of (12 tagged-value-address) is 1
setm: (12 tagged-value-address): setting 1091 to 1037
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1090 1083) (1091 1037) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 47 write 11: ((12 tagged-value-address deref) <- copy (6 tagged-value))
m: (6 tagged-value)
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1079
sz: (6 tagged-value)
run: writing to oarg #(tagged record (integer-address 1045 . nil)) => (12 tagged-value-address deref)
setm: (12 tagged-value-address deref) <= #(tagged record (integer-address 1045 . nil))
sz: (12 tagged-value-address deref)
m: (12 location)
sz: (12 location)
addr: (12 location)
addr: initial result: 12
addr: incrementing by 1079
sz: (1037 tagged-value)
addr: (12 tagged-value-address deref)
addr: initial result: 12
addr: incrementing by 1079
addr: deref 1091 => 1037
setm: size of (12 tagged-value-address deref) is 2
setm: (12 tagged-value-address deref): setting 1037 to integer-address
setm: (12 tagged-value-address deref): setting 1038 to 1045
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 0) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1090 1083) (1091 1037) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 48 write 12: ((11 integer-address deref) <- add (11 integer-address deref) (1 literal))
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1079
sz: (1083 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1079
addr: deref 1090 => 1083
add: 0 1
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1079
sz: (1083 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1079
addr: deref 1090 => 1083
run: writing to oarg 1 => (11 integer-address deref)
setm: (11 integer-address deref) <= 1
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1079
sz: (1083 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1079
addr: deref 1090 => 1083
setm: size of (11 integer-address deref) is 1
setm: (11 integer-address deref): setting 1083 to 1
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1090 1083) (1091 1037) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 49 write 13: ((13 integer) <- len (10 tagged-value-array-address deref))
array-len: (10 tagged-value-array-address deref)
m: (10 integer-address deref)
sz: (10 integer-address deref)
m: (10 location)
sz: (10 location)
addr: (10 location)
addr: initial result: 10
addr: incrementing by 1079
sz: (1036 integer)
addr: (10 integer-address deref)
addr: initial result: 10
addr: incrementing by 1079
addr: deref 1089 => 1036
run: writing to oarg 4 => (13 integer)
setm: (13 integer) <= 4
sz: (13 integer)
addr: (13 integer)
addr: initial result: 13
addr: incrementing by 1079
setm: size of (13 integer) is 1
setm: (13 integer): setting 1092 to 4
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1090 1083) (1091 1037) (1092 4) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 50 write 14: ((14 boolean) <- lt (11 integer-address deref) (13 integer))
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1079
sz: (1083 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1079
addr: deref 1090 => 1083
m: (13 integer)
sz: (13 integer)
addr: (13 integer)
addr: initial result: 13
addr: incrementing by 1079
run: writing to oarg t => (14 boolean)
setm: (14 boolean) <= t
sz: (14 boolean)
addr: (14 boolean)
addr: initial result: 14
addr: incrementing by 1079
setm: size of (14 boolean) is 1
setm: (14 boolean): setting 1093 to t
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1090 1083) (1091 1037) (1092 4) (1093 t) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 51 write 15: (jump-if (14 boolean) (1 offset))
m: (14 boolean)
sz: (14 boolean)
addr: (14 boolean)
addr: initial result: 14
addr: incrementing by 1079
jump: checking that t is t
jump: jumping to 17
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1089 1036) (1090 1083) (1091 1037) (1092 4) (1093 t) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 52 write 17: ((9 boolean-address) <- get-address (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1079
record-info: initial base 1080 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (0 offset) => 1080
run: writing to oarg 1080 => (9 boolean-address)
setm: (9 boolean-address) <= 1080
sz: (9 boolean-address)
addr: (9 boolean-address)
addr: initial result: 9
addr: incrementing by 1079
setm: size of (9 boolean-address) is 1
setm: (9 boolean-address): setting 1088 to 1080
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1088 1080) (1089 1036) (1090 1083) (1091 1037) (1092 4) (1093 t) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 53 write 18: ((9 boolean-address deref) <- copy (t literal))
run: writing to oarg t => (9 boolean-address deref)
setm: (9 boolean-address deref) <= t
sz: (9 boolean-address deref)
m: (9 location)
sz: (9 location)
addr: (9 location)
addr: initial result: 9
addr: incrementing by 1079
sz: (1080 boolean)
addr: (9 boolean-address deref)
addr: initial result: 9
addr: incrementing by 1079
addr: deref 1088 => 1080
setm: size of (9 boolean-address deref) is 1
setm: (9 boolean-address deref): setting 1080 to t
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1080 t) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1088 1080) (1089 1036) (1090 1083) (1091 1037) (1092 4) (1093 t) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 54 write 19: (reply (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1079
sz: (1 channel)
reply: ((1 channel)) ((1 channel-address deref))
reply: #(tagged record (t nil 0 1 1036 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (t nil 0 1 1036 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
setm: size of (1 channel-address deref) is 5
setm: (1 channel-address deref): setting 1031 to t
setm: (1 channel-address deref): setting 1032 to nil
setm: (1 channel-address deref): setting 1033 to 0
setm: (1 channel-address deref): setting 1034 to 1
setm: (1 channel-address deref): setting 1035 to 1036
run: -- ((1 1031) (2 1045) (3 1077) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1031 t) (1033 0) (1034 1) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1080 t) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1088 1080) (1089 1036) (1090 1083) (1091 1037) (1092 4) (1093 t) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 55 main 5: ((4 integer) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel-address deref) (2 offset) => 1033 integer
m: (1033 integer global)
sz: (1033 integer global)
addr: (1033 integer global)
addr: initial result: 1033
run: writing to oarg 0 => (4 integer)
setm: (4 integer) <= 0
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 0
run: -- ((1 1031) (2 1045) (3 1077) (4 0) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1031 t) (1033 0) (1034 1) (1035 1036) (1036 4) (1037 integer-address) (1038 1045) (1045 34) (1046 30) (1047 integer-address) (1048 1) (1049 t) (1050 1077) (1051 1077) (1052 1078) (1077 integer-address) (1078 1045) (1079 30) (1080 t) (1082 0) (1083 1) (1084 1036) (1085 integer-address) (1086 1045) (1088 1080) (1089 1036) (1090 1083) (1091 1037) (1092 4) (1093 t) (1110 30) (1113 0) (1114 0) (1115 1036) (1116 1) (1117 1036) (1118 4) (1119 t) (1120 0))
run: 56 main 6: ((5 integer) <- get (1 channel-address deref) (3 offset))
record-info: (1 channel-address deref) (3 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel-address deref) (3 offset) => 1034 integer
m: (1034 integer global)
sz: (1034 integer global)
addr: (1034 integer global)
addr: initial result: 1034
run: writing to oarg 1 => (5 integer)
setm: (5 integer) <= 1
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 1
