c{0: 0 ((4 integer) <- arg) -- nil
c{0: 1 ((5 integer) <- copy (34 literal)) -- nil
c{0: 2 ((5 integer) (6 boolean) <- arg) -- nil
c{1: 0 arg ((4 integer))
c{1: 1 copy ((5 integer))
c{1: 2 arg ((5 integer) (6 boolean))
cn0: ((4 integer) <- arg) nil nil
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- copy (34 literal)) nil nil
maybe-add: (34 literal)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((5 integer) (6 boolean) <- arg) nil nil
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn1: update names nil nil
c{0: 0 (test1 (1 literal)) -- nil
c{1: 0 test1 nil
cn0: (test1 (1 literal)) nil nil
maybe-add: (1 literal)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: (test1 (1 literal))
run: -- nil
run: 2 test1 0: ((4 integer) <- arg)
arg: nil 0 (1)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 1
run: -- ((4 1))
run: 3 test1 1: ((5 integer) <- copy (34 literal))
run: 34 => (5 integer)
setm: (5 integer) <= 34
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 34
run: -- ((4 1) (5 34))
run: 4 test1 2: ((5 integer) (6 boolean) <- arg)
arg: nil 1 (1)
setm: (5 integer) <= nil
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to nil
setm: (6 boolean) <= nil
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 6 to nil
