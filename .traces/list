cvt0: 0 ((1 list-address) <- new (list type)) -- nil
cvt0: 1 ((2 tagged-value-address) <- list-value-address (1 list-address)) -- nil
cvt0: 2 ((3 type-address) <- get-address (2 tagged-value-address deref) (0 offset)) -- nil
cvt0: 3 ((3 type-address deref) <- copy (integer literal)) -- nil
cvt0: 4 ((4 location) <- get-address (2 tagged-value-address deref) (1 offset)) -- nil
cvt0: 5 ((4 location deref) <- copy (34 literal)) -- nil
cvt0: 6 ((5 list-address-address) <- get-address (1 list-address deref) (1 offset)) -- nil
cvt0: 7 ((5 list-address-address deref) <- new (list type)) -- nil
cvt0: 8 ((6 list-address) <- copy (5 list-address-address deref)) -- nil
cvt0: 9 ((7 tagged-value-address) <- list-value-address (6 list-address)) -- nil
cvt0: 10 ((8 type-address) <- get-address (7 tagged-value-address deref) (0 offset)) -- nil
cvt0: 11 ((8 type-address deref) <- copy (boolean literal)) -- nil
cvt0: 12 ((9 location) <- get-address (7 tagged-value-address deref) (1 offset)) -- nil
cvt0: 13 ((9 location deref) <- copy (t literal)) -- nil
cvt1: 0 new ((1 list-address))
cvt1: 1 list-value-address ((2 tagged-value-address))
cvt1: 2 get-address ((3 type-address))
cvt1: 3 copy ((3 type-address deref))
cvt1: 4 get-address ((4 location))
cvt1: 5 copy ((4 location deref))
cvt1: 6 get-address ((5 list-address-address))
cvt1: 7 new ((5 list-address-address deref))
cvt1: 8 copy ((6 list-address))
cvt1: 9 list-value-address ((7 tagged-value-address))
cvt1: 10 get-address ((8 type-address))
cvt1: 11 copy ((8 type-address deref))
cvt1: 12 get-address ((9 location))
cvt1: 13 copy ((9 location deref))
schedule: test1
run: -- nil
run: test1 0: ((1 list-address) <- new (list type))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: writing to oarg 1000 => (1 list-address)
setm: (1 list-address) <= 1000
sz: (1 list-address)
setm: size of (1 list-address) is 1
run: -- ((1 1000))
run: test1 1: ((2 tagged-value-address) <- list-value-address (1 list-address))
run: -- ((1 1000))
run: list-value-address 0: ((base list-address) <- arg)
arg: nil 0 ((1 list-address))
sz: (1 list-address)
m: (1 list-address) 1
sz: (1 list-address)
setm: (base list-address) <= 1000
sz: (base list-address)
setm: size of (base list-address) is 1
run: -- ((1 1000) (base 1000))
run: list-value-address 1: ((result tagged-value-address) <- get-address (base list-address deref) (0 offset))
get-address: (base list-address deref).0
get-address: after: (1000 list)
run: writing to oarg 1000 => (result tagged-value-address)
setm: (result tagged-value-address) <= 1000
sz: (result tagged-value-address)
setm: size of (result tagged-value-address) is 1
run: -- ((1 1000) (base 1000) (result 1000))
run: list-value-address 2: (reply (result tagged-value-address))
reply: ((result tagged-value-address)) ((2 tagged-value-address))
reply: (result tagged-value-address) => (2 tagged-value-address)
sz: (result tagged-value-address)
m: (result tagged-value-address) 1
sz: (result tagged-value-address)
setm: (2 tagged-value-address) <= 1000
sz: (2 tagged-value-address)
setm: size of (2 tagged-value-address) is 1
run: -- ((1 1000) (2 1000) (base 1000) (result 1000))
run: test1 2: ((3 type-address) <- get-address (2 tagged-value-address deref) (0 offset))
get-address: (2 tagged-value-address deref).0
get-address: after: (1000 tagged-value)
run: writing to oarg 1000 => (3 type-address)
setm: (3 type-address) <= 1000
sz: (3 type-address)
setm: size of (3 type-address) is 1
run: -- ((1 1000) (2 1000) (3 1000) (base 1000) (result 1000))
run: test1 3: ((3 type-address deref) <- copy (integer literal))
sz: (integer literal)
m: (integer literal) literal
run: writing to oarg integer => (3 type-address deref)
setm: (3 type-address deref) <= integer
sz: (3 type-address deref)
sz: (3 location)
m: (3 location) 1
sz: (3 location)
sz: (1000 type)
setm: size of (3 type-address deref) is 1
run: -- ((1 1000) (1000 integer) (2 1000) (3 1000) (base 1000) (result 1000))
run: test1 4: ((4 location) <- get-address (2 tagged-value-address deref) (1 offset))
get-address: (2 tagged-value-address deref).1
get-address: after: (1000 tagged-value)
run: writing to oarg 1001 => (4 location)
setm: (4 location) <= 1001
sz: (4 location)
setm: size of (4 location) is 1
run: -- ((1 1000) (1000 integer) (2 1000) (3 1000) (4 1001) (base 1000) (result 1000))
run: test1 5: ((4 location deref) <- copy (34 literal))
sz: (34 literal)
m: (34 literal) literal
run: writing to oarg 34 => (4 location deref)
setm: (4 location deref) <= 34
sz: (4 location deref)
sz: (4 location)
m: (4 location) 1
sz: (4 location)
sz: (1001 location)
setm: size of (4 location deref) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (2 1000) (3 1000) (4 1001) (base 1000) (result 1000))
run: test1 6: ((5 list-address-address) <- get-address (1 list-address deref) (1 offset))
get-address: (1 list-address deref).1
get-address: after: (1000 list)
run: writing to oarg 1002 => (5 list-address-address)
setm: (5 list-address-address) <= 1002
sz: (5 list-address-address)
setm: size of (5 list-address-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (2 1000) (3 1000) (4 1001) (5 1002) (base 1000) (result 1000))
run: test1 7: ((5 list-address-address deref) <- new (list type))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: writing to oarg 1003 => (5 list-address-address deref)
setm: (5 list-address-address deref) <= 1003
sz: (5 list-address-address deref)
sz: (5 location)
m: (5 location) 1
sz: (5 location)
sz: (1002 list-address)
setm: size of (5 list-address-address deref) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (2 1000) (3 1000) (4 1001) (5 1002) (base 1000) (result 1000))
run: test1 8: ((6 list-address) <- copy (5 list-address-address deref))
sz: (5 list-address-address deref)
sz: (5 location)
m: (5 location) 1
sz: (5 location)
sz: (1002 list-address)
m: (5 list-address-address deref) 1
sz: (5 list-address-address deref)
sz: (5 location)
m: (5 location) 1
sz: (5 location)
sz: (1002 list-address)
run: writing to oarg 1003 => (6 list-address)
setm: (6 list-address) <= 1003
sz: (6 list-address)
setm: size of (6 list-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (base 1000) (result 1000))
run: test1 9: ((7 tagged-value-address) <- list-value-address (6 list-address))
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (base 1000) (result 1000))
run: list-value-address 0: ((base list-address) <- arg)
arg: nil 0 ((6 list-address))
sz: (6 list-address)
m: (6 list-address) 1
sz: (6 list-address)
setm: (base list-address) <= 1003
sz: (base list-address)
setm: size of (base list-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (base 1003) (result 1000))
run: list-value-address 1: ((result tagged-value-address) <- get-address (base list-address deref) (0 offset))
get-address: (base list-address deref).0
get-address: after: (1003 list)
run: writing to oarg 1003 => (result tagged-value-address)
setm: (result tagged-value-address) <= 1003
sz: (result tagged-value-address)
setm: size of (result tagged-value-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (base 1003) (result 1003))
run: list-value-address 2: (reply (result tagged-value-address))
reply: ((result tagged-value-address)) ((7 tagged-value-address))
reply: (result tagged-value-address) => (7 tagged-value-address)
sz: (result tagged-value-address)
m: (result tagged-value-address) 1
sz: (result tagged-value-address)
setm: (7 tagged-value-address) <= 1003
sz: (7 tagged-value-address)
setm: size of (7 tagged-value-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (base 1003) (result 1003))
run: test1 10: ((8 type-address) <- get-address (7 tagged-value-address deref) (0 offset))
get-address: (7 tagged-value-address deref).0
get-address: after: (1003 tagged-value)
run: writing to oarg 1003 => (8 type-address)
setm: (8 type-address) <= 1003
sz: (8 type-address)
setm: size of (8 type-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (8 1003) (base 1003) (result 1003))
run: test1 11: ((8 type-address deref) <- copy (boolean literal))
sz: (boolean literal)
m: (boolean literal) literal
run: writing to oarg boolean => (8 type-address deref)
setm: (8 type-address deref) <= boolean
sz: (8 type-address deref)
sz: (8 location)
m: (8 location) 1
sz: (8 location)
sz: (1003 type)
setm: size of (8 type-address deref) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (1003 boolean) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (8 1003) (base 1003) (result 1003))
run: test1 12: ((9 location) <- get-address (7 tagged-value-address deref) (1 offset))
get-address: (7 tagged-value-address deref).1
get-address: after: (1003 tagged-value)
run: writing to oarg 1004 => (9 location)
setm: (9 location) <= 1004
sz: (9 location)
setm: size of (9 location) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (1003 boolean) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (8 1003) (9 1004) (base 1003) (result 1003))
run: test1 13: ((9 location deref) <- copy (t literal))
sz: (t literal)
m: (t literal) literal
run: writing to oarg t => (9 location deref)
setm: (9 location deref) <= t
sz: (9 location deref)
sz: (9 location)
m: (9 location) 1
sz: (9 location)
sz: (1004 location)
setm: size of (9 location deref) is 1
cvt0: 0 ((10 list-address) <- list-next (1 list-address)) -- nil
cvt1: 0 list-next ((10 list-address))
schedule: test2
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (1003 boolean) (1004 t) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (8 1003) (9 1004) (base 1003) (result 1003))
run: test2 0: ((10 list-address) <- list-next (1 list-address))
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (1003 boolean) (1004 t) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (8 1003) (9 1004) (base 1003) (result 1003))
run: list-next 0: ((base list-address) <- arg)
arg: nil 0 ((1 list-address))
sz: (1 list-address)
m: (1 list-address) 1
sz: (1 list-address)
setm: (base list-address) <= 1000
sz: (base list-address)
setm: size of (base list-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (1003 boolean) (1004 t) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (8 1003) (9 1004) (base 1000) (result 1003))
run: list-next 1: ((result list-address) <- get (base list-address deref) (1 offset))
sz: (1002 list-address)
m: (1002 list-address) 1
sz: (1002 list-address)
run: writing to oarg 1003 => (result list-address)
setm: (result list-address) <= 1003
sz: (result list-address)
setm: size of (result list-address) is 1
run: -- ((1 1000) (1000 integer) (1001 34) (1002 1003) (1003 boolean) (1004 t) (2 1000) (3 1000) (4 1001) (5 1002) (6 1003) (7 1003) (8 1003) (9 1004) (base 1000) (result 1003))
run: list-next 2: (reply (result list-address))
reply: ((result list-address)) ((10 list-address))
reply: (result list-address) => (10 list-address)
sz: (result list-address)
m: (result list-address) 1
sz: (result list-address)
setm: (10 list-address) <= 1003
sz: (10 list-address)
setm: size of (10 list-address) is 1
