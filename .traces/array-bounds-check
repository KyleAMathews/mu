c{0: 0 ((1 integer) <- copy (2 literal)) -- nil
c{0: 1 ((2 integer) <- copy (23 literal)) -- nil
c{0: 2 ((3 integer) <- copy (24 literal)) -- nil
c{0: 3 ((4 integer) <- index (1 integer-array) (2 literal)) -- nil
c{1: 0 copy ((1 integer))
c{1: 1 copy ((2 integer))
c{1: 2 copy ((3 integer))
c{1: 3 index ((4 integer))
cn0: ((1 integer) <- copy (2 literal)) nil nil
maybe-add: (2 literal)
cn0: checking (1 integer)
maybe-add: (1 integer)
cn0: ((2 integer) <- copy (23 literal)) nil nil
maybe-add: (23 literal)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((3 integer) <- copy (24 literal)) nil nil
maybe-add: (24 literal)
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: ((4 integer) <- index (1 integer-array) (2 literal)) nil nil
maybe-add: (1 integer-array)
maybe-add: (2 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((1 integer) <- copy (2 literal))
run: 2 => (1 integer)
setm: (1 integer) <= 2
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 2
run: -- ((1 2))
run: 2 main 1: ((2 integer) <- copy (23 literal))
run: 23 => (2 integer)
setm: (2 integer) <= 23
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 23
run: -- ((1 2) (2 23))
run: 3 main 2: ((3 integer) <- copy (24 literal))
run: 24 => (3 integer)
setm: (3 integer) <= 24
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
setm: size of (3 integer) is 1
setm: (3 integer): setting 3 to 24
run: -- ((1 2) (2 23) (3 24))
run: 4 main 3: ((4 integer) <- index (1 integer-array) (2 literal))
array-info: (1 integer-array) (2 literal)
addr: (1 integer-array)
addr: initial result: 1
array-info: initial base 1 type ((array t) (elem integer))
array-len: (1 integer-array)
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
array-info: array-len of (1 integer-array) is 2
schedule: done with routine
