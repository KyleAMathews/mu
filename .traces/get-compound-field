cvt0: 0 ((1 integer) <- copy (34 literal)) -- nil
cvt0: 1 ((2 integer) <- copy (35 literal)) -- nil
cvt0: 2 ((3 integer) <- copy (36 literal)) -- nil
cvt0: 3 ((4 integer-integer-pair) <- get (1 integer-point-pair) (1 offset)) -- nil
cvt1: 0 copy ((1 integer))
cvt1: 1 copy ((2 integer))
cvt1: 2 copy ((3 integer))
cvt1: 3 get ((4 integer-integer-pair))
schedule: test1
run: -- nil
run: test1 0: ((1 integer) <- copy (34 literal))
sz: (34 literal)
m: (34 literal) literal
run: writing to oarg 34 => (1 integer)
setm: (1 integer) <= 34
sz: (1 integer)
setm: size of (1 integer) is 1
run: -- ((1 34))
run: test1 1: ((2 integer) <- copy (35 literal))
sz: (35 literal)
m: (35 literal) literal
run: writing to oarg 35 => (2 integer)
setm: (2 integer) <= 35
sz: (2 integer)
setm: size of (2 integer) is 1
run: -- ((1 34) (2 35))
run: test1 2: ((3 integer) <- copy (36 literal))
sz: (36 literal)
m: (36 literal) literal
run: writing to oarg 36 => (3 integer)
setm: (3 integer) <= 36
sz: (3 integer)
setm: size of (3 integer) is 1
run: -- ((1 34) (2 35) (3 36))
run: test1 3: ((4 integer-integer-pair) <- get (1 integer-point-pair) (1 offset))
sz: (2 integer-integer-pair)
m: (2 integer-integer-pair) 2
sz: (2 integer-integer-pair)
sz: (2 integer-integer-pair)
run: writing to oarg #(tagged record (35 36 . nil)) => (4 integer-integer-pair)
setm: (4 integer-integer-pair) <= #(tagged record (35 36 . nil))
sz: (4 integer-integer-pair)
setm: size of (4 integer-integer-pair) is 2
