cvt0: 0 ((default-scope scope-address) <- new (scope literal) (5 literal)) -- nil
cvt0: 1 ((1 integer-boolean-pair-address) <- new (integer-boolean-pair literal)) -- nil
cvt0: 2 ((2 integer-address) <- get-address (1 integer-boolean-pair-address deref) (0 offset)) -- nil
cvt0: 3 ((2 integer-address deref) <- copy (34 literal)) -- nil
cvt0: 4 ((3 integer global) <- get (1 integer-boolean-pair-address deref) (0 offset)) -- nil
cvt1: 0 new ((default-scope scope-address))
cvt1: 1 new ((1 integer-boolean-pair-address))
cvt1: 2 get-address ((2 integer-address))
cvt1: 3 copy ((2 integer-address deref))
cvt1: 4 get ((3 integer global))
schedule: main
run: -- nil
run: main 0: ((default-scope scope-address) <- new (scope literal) (5 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 5))
run: main 1: ((1 integer-boolean-pair-address) <- new (integer-boolean-pair literal))
sizeof: integer-boolean-pair
sizeof: integer
sizeof: boolean
run: writing to oarg 1006 => (1 integer-boolean-pair-address)
setm: (1 integer-boolean-pair-address) <= 1006
sz: (1 integer-boolean-pair-address)
setm: size of (1 integer-boolean-pair-address) is 1
run: -- ((1000 5) (1001 1006))
run: main 2: ((2 integer-address) <- get-address (1 integer-boolean-pair-address deref) (0 offset))
run: writing to oarg 1006 => (2 integer-address)
setm: (2 integer-address) <= 1006
sz: (2 integer-address)
setm: size of (2 integer-address) is 1
run: -- ((1000 5) (1001 1006) (1002 1006))
run: main 3: ((2 integer-address deref) <- copy (34 literal))
run: writing to oarg 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
sz: (1006 integer)
setm: size of (2 integer-address deref) is 1
run: -- ((1000 5) (1001 1006) (1002 1006) (1006 34))
run: main 4: ((3 integer global) <- get (1 integer-boolean-pair-address deref) (0 offset))
m: (1006 integer global)
sz: (1006 integer global)
run: writing to oarg 34 => (3 integer global)
setm: (3 integer global) <= 34
sz: (3 integer global)
setm: size of (3 integer global) is 1
