cvt0: 0 ((default-scope scope-address) <- new (scope literal) (20 literal)) -- nil
cvt0: 1 ((first-arg-box tagged-value-address) <- arg) -- nil
cvt0: 2 ((first-arg integer) (match? boolean) <- maybe-coerce (first-arg-box tagged-value-address deref) (integer literal)) -- ((open 2))
cvt0: 3 (break-unless (match? boolean)) -- ((open 2))
cvt0: 4 ((second-arg-box tagged-value-address) <- arg) -- ((open 2))
cvt0: 5 ((second-arg integer) <- maybe-coerce (second-arg-box tagged-value-address deref) (integer literal)) -- ((open 2))
cvt0: 6 ((result integer) <- add (first-arg integer) (second-arg integer)) -- ((open 2))
cvt0: 7 (reply (result integer)) -- ((open 2))
cvt0: 8 (reply (nil literal)) -- ((close 8) (open 2))
cvt1: 0 new ((default-scope scope-address))
cvt1: 1 arg ((first-arg-box tagged-value-address))
cvt1: 2 begin nil
cvt1: 2 maybe-coerce ((first-arg integer) (match? boolean))
cvt1: 3 break-unless nil
cvt1: 4 arg ((second-arg-box tagged-value-address))
cvt1: 5 maybe-coerce ((second-arg integer))
cvt1: 6 add ((result integer))
cvt1: 7 reply nil
cvt1: 8 reply nil
cvt0: 0 ((1 tagged-value-address) <- new-tagged-value (integer literal) (34 literal)) -- nil
cvt0: 1 ((2 tagged-value-address) <- new-tagged-value (integer literal) (3 literal)) -- nil
cvt0: 2 ((3 integer) <- test1 (1 tagged-value-address) (2 tagged-value-address)) -- nil
cvt1: 0 new-tagged-value ((1 tagged-value-address))
cvt1: 1 new-tagged-value ((2 tagged-value-address))
cvt1: 2 test1 ((3 integer))
schedule: main
run: -- nil
run: main 0: ((1 tagged-value-address) <- new-tagged-value (integer literal) (34 literal))
run: -- nil
run: new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer 34)
setm: (1 type) <= integer
sz: (1 type)
setm: size of (1 type) is 1
run: -- ((1000 30) (1001 integer))
run: new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
sizeof: integer
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
setm: size of (2 integer) is 1
run: -- ((1000 30) (1001 integer) (1002 1))
run: new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
setm: size of (3 boolean) is 1
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t))
run: new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t))
run: new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1031
sz: (4 tagged-value-address)
setm: size of (4 tagged-value-address) is 1
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031))
run: new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
run: writing to oarg 1031 => (5 location)
setm: (5 location) <= 1031
sz: (5 location)
setm: size of (5 location) is 1
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031))
run: new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
run: writing to oarg integer => (5 location deref)
setm: (5 location deref) <= integer
sz: (5 location deref)
m: (5 location)
sz: (5 location)
sz: (1031 location)
setm: size of (5 location deref) is 1
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1031 integer))
run: new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
run: writing to oarg 1032 => (6 location)
setm: (6 location) <= 1032
sz: (6 location)
setm: size of (6 location) is 1
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer))
run: new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer 34)
setm: (6 location deref) <= 34
sz: (6 location deref)
m: (6 location)
sz: (6 location)
sz: (1032 location)
setm: size of (6 location deref) is 1
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34))
run: new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
reply: ((4 tagged-value-address)) ((1 tagged-value-address))
reply: 1031 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1031
sz: (1 tagged-value-address)
setm: size of (1 tagged-value-address) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34))
run: main 1: ((2 tagged-value-address) <- new-tagged-value (integer literal) (3 literal))
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34))
run: new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1033 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30))
run: new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer 3)
setm: (1 type) <= integer
sz: (1 type)
setm: size of (1 type) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer))
run: new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
sizeof: integer
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
setm: size of (2 integer) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1))
run: new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
setm: size of (3 boolean) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t))
run: new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t))
run: new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1064 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1064
sz: (4 tagged-value-address)
setm: size of (4 tagged-value-address) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064))
run: new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
run: writing to oarg 1064 => (5 location)
setm: (5 location) <= 1064
sz: (5 location)
setm: size of (5 location) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064))
run: new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
run: writing to oarg integer => (5 location deref)
setm: (5 location deref) <= integer
sz: (5 location deref)
m: (5 location)
sz: (5 location)
sz: (1064 location)
setm: size of (5 location deref) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1064 integer))
run: new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
run: writing to oarg 1065 => (6 location)
setm: (6 location) <= 1065
sz: (6 location)
setm: size of (6 location) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer))
run: new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer 3)
setm: (6 location deref) <= 3
sz: (6 location deref)
m: (6 location)
sz: (6 location)
sz: (1065 location)
setm: size of (6 location deref) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3))
run: new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
reply: ((4 tagged-value-address)) ((2 tagged-value-address))
reply: 1064 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1064
sz: (2 tagged-value-address)
setm: size of (2 tagged-value-address) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (2 1064))
run: main 2: ((3 integer) <- test1 (1 tagged-value-address) (2 tagged-value-address))
m: (1 tagged-value-address)
sz: (1 tagged-value-address)
m: (2 tagged-value-address)
sz: (2 tagged-value-address)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (2 1064))
run: test1 0: ((default-scope scope-address) <- new (scope literal) (20 literal))
sizeof: location
run: writing to oarg 1066 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (2 1064))
run: test1 1: ((1 tagged-value-address) <- arg)
arg: nil 0 (1031 1064)
setm: (1 tagged-value-address) <= 1031
sz: (1 tagged-value-address)
setm: size of (1 tagged-value-address) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (2 1064))
run: test1 2: ((2 integer) (3 boolean) <- maybe-coerce (1 tagged-value-address deref) (integer literal))
m: (1 tagged-value-address deref)
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
sz: (1031 tagged-value)
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
sz: (1031 tagged-value)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (2 1064))
run: maybe-coerce 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1087 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (2 1064))
run: maybe-coerce 1: ((1 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1118 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1118
sz: (1 tagged-value-address)
setm: size of (1 tagged-value-address) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (2 1064))
run: maybe-coerce 2: ((1 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer 34 . nil)) integer)
setm: (1 tagged-value-address deref) <= #(tagged record (integer 34 . nil))
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
sz: (1118 tagged-value)
setm: size of (1 tagged-value-address deref) is 2
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1118 integer) (1119 34) (2 1064))
run: maybe-coerce 3: ((2 type) <- arg)
arg: nil 1 (#(tagged record (integer 34 . nil)) integer)
setm: (2 type) <= integer
sz: (2 type)
setm: size of (2 type) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1118 integer) (1119 34) (2 1064))
run: maybe-coerce 4: ((3 type) <- get (1 tagged-value-address deref) (0 offset))
m: (1118 type global)
sz: (1118 type global)
run: writing to oarg integer => (3 type)
setm: (3 type) <= integer
sz: (3 type)
setm: size of (3 type) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1118 integer) (1119 34) (2 1064))
run: maybe-coerce 5: ((4 boolean) <- eq (3 type) (2 type))
m: (3 type)
sz: (3 type)
m: (2 type)
sz: (2 type)
run: writing to oarg t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
setm: size of (4 boolean) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1118 integer) (1119 34) (2 1064))
run: maybe-coerce 6: (jump-if (4 boolean) (1 offset))
m: (4 boolean)
sz: (4 boolean)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1118 integer) (1119 34) (2 1064))
run: maybe-coerce 8: ((5 location) <- get (1 tagged-value-address deref) (1 offset))
m: (1119 location global)
sz: (1119 location global)
run: writing to oarg 34 => (5 location)
setm: (5 location) <= 34
sz: (5 location)
setm: size of (5 location) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (2 1064))
run: maybe-coerce 9: (reply (5 location) (4 boolean))
m: (5 location)
sz: (5 location)
m: (4 boolean)
sz: (4 boolean)
reply: ((5 location) (4 boolean)) ((2 integer) (3 boolean))
reply: 34 => (2 integer)
setm: (2 integer) <= 34
sz: (2 integer)
setm: size of (2 integer) is 1
reply: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
setm: size of (3 boolean) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (2 1064))
run: test1 3: (jump-unless (3 boolean) (4 offset))
m: (3 boolean)
sz: (3 boolean)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (2 1064))
run: test1 4: ((4 tagged-value-address) <- arg)
arg: nil 1 (1031 1064)
setm: (4 tagged-value-address) <= 1064
sz: (4 tagged-value-address)
setm: size of (4 tagged-value-address) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (2 1064))
run: test1 5: ((5 integer) <- maybe-coerce (4 tagged-value-address deref) (integer literal))
m: (4 tagged-value-address deref)
sz: (4 tagged-value-address deref)
m: (4 location)
sz: (4 location)
sz: (1064 tagged-value)
sz: (4 tagged-value-address deref)
m: (4 location)
sz: (4 location)
sz: (1064 tagged-value)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (2 1064))
run: maybe-coerce 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1120 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (2 1064))
run: maybe-coerce 1: ((1 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1151 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1151
sz: (1 tagged-value-address)
setm: size of (1 tagged-value-address) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (2 1064))
run: maybe-coerce 2: ((1 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer 3 . nil)) integer)
setm: (1 tagged-value-address deref) <= #(tagged record (integer 3 . nil))
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
sz: (1151 tagged-value)
setm: size of (1 tagged-value-address deref) is 2
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1151 integer) (1152 3) (2 1064))
run: maybe-coerce 3: ((2 type) <- arg)
arg: nil 1 (#(tagged record (integer 3 . nil)) integer)
setm: (2 type) <= integer
sz: (2 type)
setm: size of (2 type) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1151 integer) (1152 3) (2 1064))
run: maybe-coerce 4: ((3 type) <- get (1 tagged-value-address deref) (0 offset))
m: (1151 type global)
sz: (1151 type global)
run: writing to oarg integer => (3 type)
setm: (3 type) <= integer
sz: (3 type)
setm: size of (3 type) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1151 integer) (1152 3) (2 1064))
run: maybe-coerce 5: ((4 boolean) <- eq (3 type) (2 type))
m: (3 type)
sz: (3 type)
m: (2 type)
sz: (2 type)
run: writing to oarg t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
setm: size of (4 boolean) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1151 integer) (1152 3) (2 1064))
run: maybe-coerce 6: (jump-if (4 boolean) (1 offset))
m: (4 boolean)
sz: (4 boolean)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1151 integer) (1152 3) (2 1064))
run: maybe-coerce 8: ((5 location) <- get (1 tagged-value-address deref) (1 offset))
m: (1152 location global)
sz: (1152 location global)
run: writing to oarg 3 => (5 location)
setm: (5 location) <= 3
sz: (5 location)
setm: size of (5 location) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1125 3) (1151 integer) (1152 3) (2 1064))
run: maybe-coerce 9: (reply (5 location) (4 boolean))
m: (5 location)
sz: (5 location)
m: (4 boolean)
sz: (4 boolean)
reply: ((5 location) (4 boolean)) ((5 integer))
reply: 3 => (5 integer)
setm: (5 integer) <= 3
sz: (5 integer)
setm: size of (5 integer) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1071 3) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1125 3) (1151 integer) (1152 3) (2 1064))
run: test1 6: ((6 integer) <- add (2 integer) (5 integer))
m: (2 integer)
sz: (2 integer)
m: (5 integer)
sz: (5 integer)
add: 34 3
m: (2 integer)
sz: (2 integer)
m: (5 integer)
sz: (5 integer)
run: writing to oarg 37 => (6 integer)
setm: (6 integer) <= 37
sz: (6 integer)
setm: size of (6 integer) is 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1071 3) (1072 37) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1125 3) (1151 integer) (1152 3) (2 1064))
run: test1 7: (reply (6 integer))
m: (6 integer)
sz: (6 integer)
reply: ((6 integer)) ((3 integer))
reply: 37 => (3 integer)
setm: (3 integer) <= 37
sz: (3 integer)
setm: size of (3 integer) is 1
