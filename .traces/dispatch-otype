cvt0: 0 ((4 type) <- otype 0) -- nil
cvt0: 1 ((5 boolean) <- neq (4 type) (integer literal)) -- nil
cvt0: 2 (jif (5 boolean) (3 offset)) -- nil
cvt0: 3 ((6 integer) <- arg) -- nil
cvt0: 4 ((7 integer) <- arg) -- nil
cvt0: 5 ((8 integer) <- add (6 integer) (7 integer)) -- nil
cvt0: 6 (reply (8 integer)) -- nil
cvt1: 0 otype ((4 type))
cvt1: 1 neq ((5 boolean))
cvt1: 2 jif nil
cvt1: 3 arg ((6 integer))
cvt1: 4 arg ((7 integer))
cvt1: 5 add ((8 integer))
cvt1: 6 reply nil
cvt0: 0 ((1 integer) <- test1 (1 literal) (3 literal)) -- nil
cvt1: 0 test1 ((1 integer))
schedule: main
run: -- nil
run: main 0: ((1 integer) <- test1 (1 literal) (3 literal))
run: -- nil
run: test1 0: ((4 type) <- otype 0)
run: writing to oarg integer => (4 type)
setm: (4 type) <= integer
sz: (4 type)
size of : (4 type) is 1
run: -- ((4 integer))
run: test1 1: ((5 boolean) <- neq (4 type) (integer literal))
sz: (4 type)
m: (4 type) 1
sz: (4 type)
sz: (integer literal)
m: (integer literal) literal
neq: integer integer
sz: (4 type)
m: (4 type) 1
sz: (4 type)
sz: (integer literal)
m: (integer literal) literal
run: writing to oarg nil => (5 boolean)
setm: (5 boolean) <= nil
sz: (5 boolean)
size of : (5 boolean) is 1
run: -- ((4 integer))
run: test1 2: (jif (5 boolean) (3 offset))
sz: (5 boolean)
m: (5 boolean) 1
sz: (5 boolean)
run: -- ((4 integer))
run: test1 3: ((6 integer) <- arg)
arg: nil 0 ((1 literal) (3 literal))
sz: (1 literal)
m: (1 literal) literal
setm: (6 integer) <= 1
sz: (6 integer)
size of : (6 integer) is 1
run: -- ((4 integer) (6 1))
run: test1 4: ((7 integer) <- arg)
arg: nil 1 ((1 literal) (3 literal))
sz: (3 literal)
m: (3 literal) literal
setm: (7 integer) <= 3
sz: (7 integer)
size of : (7 integer) is 1
run: -- ((4 integer) (6 1) (7 3))
run: test1 5: ((8 integer) <- add (6 integer) (7 integer))
sz: (6 integer)
m: (6 integer) 1
sz: (6 integer)
sz: (7 integer)
m: (7 integer) 1
sz: (7 integer)
add: 1 3
sz: (6 integer)
m: (6 integer) 1
sz: (6 integer)
sz: (7 integer)
m: (7 integer) 1
sz: (7 integer)
run: writing to oarg 4 => (8 integer)
setm: (8 integer) <= 4
sz: (8 integer)
size of : (8 integer) is 1
run: -- ((4 integer) (6 1) (7 3) (8 4))
run: test1 6: (reply (8 integer))
sz: (8 integer)
m: (8 integer) 1
sz: (8 integer)
setm: (1 integer) <= 4
sz: (1 integer)
size of : (1 integer) is 1
