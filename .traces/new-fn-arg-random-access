c{0: 0 ((5 integer) <- arg (1 literal)) -- nil
c{0: 1 ((4 integer) <- arg (0 literal)) -- nil
c{0: 2 ((3 integer) <- add (4 integer) (5 integer)) -- nil
c{0: 3 (reply) -- nil
c{0: 4 ((4 integer) <- copy (34 literal)) -- nil
c{1: 0 arg ((5 integer))
c{1: 1 arg ((4 integer))
c{1: 2 add ((3 integer))
c{1: 3 reply nil
c{1: 4 copy ((4 integer))
cn0: ((5 integer) <- arg (1 literal)) nil nil
maybe-add: (1 literal)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((4 integer) <- arg (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((3 integer) <- add (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: (reply) nil nil
cn0: ((4 integer) <- copy (34 literal)) nil nil
maybe-add: (34 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn1: update names nil nil
c{0: 0 ((1 integer) <- copy (1 literal)) -- nil
c{0: 1 ((2 integer) <- copy (3 literal)) -- nil
c{0: 2 (test1 (1 integer) (2 integer)) -- nil
c{1: 0 copy ((1 integer))
c{1: 1 copy ((2 integer))
c{1: 2 test1 nil
cn0: ((1 integer) <- copy (1 literal)) nil nil
maybe-add: (1 literal)
cn0: checking (1 integer)
maybe-add: (1 integer)
cn0: ((2 integer) <- copy (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: (test1 (1 integer) (2 integer)) nil nil
maybe-add: (1 integer)
maybe-add: (2 integer)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((1 integer) <- copy (1 literal))
run: 1 => (1 integer)
setm: (1 integer) <= 1
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 1
run: -- ((1 1))
run: 2 main 1: ((2 integer) <- copy (3 literal))
run: 3 => (2 integer)
setm: (2 integer) <= 3
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 3
run: -- ((1 1) (2 3))
run: 3 main 2: (test1 (1 integer) (2 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
run: -- ((1 1) (2 3))
run: 4 test1 0: ((5 integer) <- arg (1 literal))
arg: ((1 literal)) 1 (1 3)
run: 3 => (5 integer)
setm: (5 integer) <= 3
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 3
run: -- ((1 1) (2 3) (5 3))
run: 5 test1 1: ((4 integer) <- arg (0 literal))
arg: ((0 literal)) 0 (1 3)
run: 1 => (4 integer)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 1
run: -- ((1 1) (2 3) (4 1) (5 3))
run: 6 test1 2: ((3 integer) <- add (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
add: 1 3
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
run: 4 => (3 integer)
setm: (3 integer) <= 4
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
setm: size of (3 integer) is 1
setm: (3 integer): setting 3 to 4
run: -- ((1 1) (2 3) (3 4) (4 1) (5 3))
run: 7 test1 3: (reply)
reply: nil nil
