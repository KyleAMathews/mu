cvt0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
cvt0: 1 ((2 integer-address) <- new (integer literal)) -- nil
cvt0: 2 ((2 integer-address deref) <- copy (34 literal)) -- nil
cvt0: 3 ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address)) -- nil
cvt0: 4 ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref)) -- nil
cvt0: 5 ((4 tagged-value) (1 channel-address deref) <- read (1 channel-address deref)) -- nil
cvt0: 6 ((5 integer-address) <- maybe-coerce (4 tagged-value) (integer-address literal)) -- nil
cvt1: 0 new-channel ((1 channel-address))
cvt1: 1 new ((2 integer-address))
cvt1: 2 copy ((2 integer-address deref))
cvt1: 3 new-tagged-value ((3 tagged-value-address))
cvt1: 4 write ((1 channel-address deref))
cvt1: 5 read ((4 tagged-value) (1 channel-address deref))
cvt1: 6 maybe-coerce ((5 integer-address))
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 integer) <- arg)
arg: nil 0 (3)
setm: (1 integer) <= 3
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 3
run: -- ((1000 30) (1001 3))
run: 4 new-channel 2: ((2 tagged-value-array-address) <- new (tagged-value-array literal) (1 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (2 tagged-value-array-address)
setm: (2 tagged-value-array-address) <= 1031
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 tagged-value-array-address) is 1
setm: (2 tagged-value-array-address): setting 1002 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1031 3))
run: 5 new-channel 3: ((3 channel-address) <- new (channel literal))
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1038 => (3 channel-address)
setm: (3 channel-address) <= 1038
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 channel-address) is 1
setm: (3 channel-address): setting 1003 to 1038
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1031 3))
run: 6 new-channel 4: ((4 integer-address) <- get-address (3 channel-address deref) (0 offset))
record-info: (3 channel-address deref) (0 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (3 channel-address deref) (0 offset) => 1038
run: writing to oarg 1038 => (4 integer-address)
setm: (4 integer-address) <= 1038
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1004 to 1038
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1031 3))
run: 7 new-channel 5: ((4 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (4 integer-address deref)
setm: (4 integer-address deref) <= 0
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1000
sz: (1038 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1038
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1038 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1031 3) (1038 0))
run: 8 new-channel 6: ((5 integer-address) <- get-address (3 channel-address deref) (1 offset))
record-info: (3 channel-address deref) (1 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (3 channel-address deref) (1 offset) => 1039
run: writing to oarg 1039 => (5 integer-address)
setm: (5 integer-address) <= 1039
sz: (5 integer-address)
addr: (5 integer-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 integer-address) is 1
setm: (5 integer-address): setting 1005 to 1039
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1031 3) (1038 0))
run: 9 new-channel 7: ((5 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (5 integer-address deref)
setm: (5 integer-address deref) <= 0
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1039 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1039
setm: size of (5 integer-address deref) is 1
setm: (5 integer-address deref): setting 1039 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1031 3) (1038 0) (1039 0))
run: 10 new-channel 8: ((6 tagged-value-array-address-address) <- get-address (3 channel-address deref) (2 offset))
record-info: (3 channel-address deref) (2 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (3 channel-address deref) (2 offset) => 1040
run: writing to oarg 1040 => (6 tagged-value-array-address-address)
setm: (6 tagged-value-array-address-address) <= 1040
sz: (6 tagged-value-array-address-address)
addr: (6 tagged-value-array-address-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-array-address-address) is 1
setm: (6 tagged-value-array-address-address): setting 1006 to 1040
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0))
run: 11 new-channel 9: ((6 tagged-value-array-address-address deref) <- copy (2 tagged-value-array-address))
m: (2 tagged-value-array-address)
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
run: writing to oarg 1031 => (6 tagged-value-array-address-address deref)
setm: (6 tagged-value-array-address-address deref) <= 1031
sz: (6 tagged-value-array-address-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1040 tagged-value-array-address)
addr: (6 tagged-value-array-address-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1040
setm: size of (6 tagged-value-array-address-address deref) is 1
setm: (6 tagged-value-array-address-address deref): setting 1040 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031))
run: 12 new-channel 10: (reply (3 channel-address))
m: (3 channel-address)
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
reply: ((3 channel-address)) ((1 channel-address))
reply: 1038 => (1 channel-address)
setm: (1 channel-address) <= 1038
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1038
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031))
run: 13 main 1: ((2 integer-address) <- new (integer literal))
sizeof: integer
run: writing to oarg 1041 => (2 integer-address)
setm: (2 integer-address) <= 1041
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 2 to 1041
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031))
run: 14 main 2: ((2 integer-address deref) <- copy (34 literal))
run: writing to oarg 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
sz: (1041 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: deref 2 => 1041
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1041 to 34
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34))
run: 15 main 3: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address))
m: (2 integer-address)
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34))
run: 16 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1042 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30))
run: 17 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 1041)
setm: (1 type) <= integer-address
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1042
setm: size of (1 type) is 1
setm: (1 type): setting 1043 to integer-address
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address))
run: 18 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1042
sizeof: integer-address
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1042
setm: size of (2 integer) is 1
setm: (2 integer): setting 1044 to 1
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1))
run: 19 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1042
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1042
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1045 to t
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t))
run: 20 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1042
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t))
run: 21 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1073 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1073
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1042
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1046 to 1073
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073))
run: 22 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1042
addr: deref 1046 => 1073
record-info: initial base 1073 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1073
run: writing to oarg 1073 => (5 location)
setm: (5 location) <= 1073
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1042
setm: size of (5 location) is 1
setm: (5 location): setting 1047 to 1073
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073))
run: 23 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1042
run: writing to oarg integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1042
sz: (1073 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1042
addr: deref 1047 => 1073
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1073 to integer-address
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1073 integer-address))
run: 24 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1042
addr: deref 1046 => 1073
record-info: initial base 1073 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1074
run: writing to oarg 1074 => (6 location)
setm: (6 location) <= 1074
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1042
setm: size of (6 location) is 1
setm: (6 location): setting 1048 to 1074
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address))
run: 25 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 1041)
setm: (6 location deref) <= 1041
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1042
sz: (1074 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1042
addr: deref 1048 => 1074
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1074 to 1041
run: -- ((1 1038) (2 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041))
run: 26 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1042
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1073 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1073
sz: (3 tagged-value-address)
addr: (3 tagged-value-address)
addr: initial result: 3
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 3 to 1073
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041))
run: 27 main 4: ((1 channel-address deref) <- write (1 channel-address deref) (3 tagged-value-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1073 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: deref 3 => 1073
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1073 tagged-value)
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041))
run: 28 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1075 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30))
run: 29 write 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1031 . nil)) #(tagged record (integer-address 1041 . nil)))
setm: (1 channel) <= #(tagged record (0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
setm: size of (1 channel) is 3
setm: (1 channel): setting 1076 to 0
setm: (1 channel): setting 1077 to 0
setm: (1 channel): setting 1078 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031))
run: 30 write 2: ((4 tagged-value) <- arg)
arg: nil 1 (#(tagged record (0 0 1031 . nil)) #(tagged record (integer-address 1041 . nil)))
setm: (4 tagged-value) <= #(tagged record (integer-address 1041 . nil))
sz: (4 tagged-value)
addr: (4 tagged-value)
addr: initial result: 4
addr: incrementing by 1075
setm: size of (4 tagged-value) is 2
setm: (4 tagged-value): setting 1079 to integer-address
setm: (4 tagged-value): setting 1080 to 1041
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer-address) (1080 1041))
run: 31 write 3: ((6 tagged-value-array-address) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
record-info: initial base 1076 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (2 offset) => 1078 tagged-value-array-address
m: (1078 tagged-value-array-address global)
sz: (1078 tagged-value-array-address global)
addr: (1078 tagged-value-array-address global)
addr: initial result: 1078
run: writing to oarg 1031 => (6 tagged-value-array-address)
setm: (6 tagged-value-array-address) <= 1031
sz: (6 tagged-value-array-address)
addr: (6 tagged-value-array-address)
addr: initial result: 6
addr: incrementing by 1075
setm: size of (6 tagged-value-array-address) is 1
setm: (6 tagged-value-array-address): setting 1081 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031))
run: 32 write 4: ((7 integer-address) <- get-address (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
record-info: initial base 1076 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel) (1 offset) => 1077
run: writing to oarg 1077 => (7 integer-address)
setm: (7 integer-address) <= 1077
sz: (7 integer-address)
addr: (7 integer-address)
addr: initial result: 7
addr: incrementing by 1075
setm: size of (7 integer-address) is 1
setm: (7 integer-address): setting 1082 to 1077
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077))
run: 33 write 5: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref))
array-info: (6 tagged-value-array-address deref) (7 integer-address deref)
addr: (6 tagged-value-array-address deref)
addr: initial result: 6
addr: incrementing by 1075
addr: deref 1081 => 1031
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
array-info: initial base 1031 type ((address t) (elem tagged-value-array) (size 1))
array-info: (6 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1075
sz: (1031 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1075
addr: deref 1081 => 1031
array-info: array-len of (6 tagged-value-array-address deref) is 3
index-address: (6 tagged-value-array-address deref) (7 integer-address deref) => 1032
run: writing to oarg 1032 => (8 tagged-value-address)
setm: (8 tagged-value-address) <= 1032
sz: (8 tagged-value-address)
addr: (8 tagged-value-address)
addr: initial result: 8
addr: incrementing by 1075
setm: size of (8 tagged-value-address) is 1
setm: (8 tagged-value-address): setting 1083 to 1032
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: 34 write 6: ((8 tagged-value-address deref) <- copy (4 tagged-value))
m: (4 tagged-value)
sz: (4 tagged-value)
addr: (4 tagged-value)
addr: initial result: 4
addr: incrementing by 1075
sz: (4 tagged-value)
run: writing to oarg #(tagged record (integer-address 1041 . nil)) => (8 tagged-value-address deref)
setm: (8 tagged-value-address deref) <= #(tagged record (integer-address 1041 . nil))
sz: (8 tagged-value-address deref)
m: (8 location)
sz: (8 location)
addr: (8 location)
addr: initial result: 8
addr: incrementing by 1075
sz: (1032 tagged-value)
addr: (8 tagged-value-address deref)
addr: initial result: 8
addr: incrementing by 1075
addr: deref 1083 => 1032
setm: size of (8 tagged-value-address deref) is 2
setm: (8 tagged-value-address deref): setting 1032 to integer-address
setm: (8 tagged-value-address deref): setting 1033 to 1041
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 0) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: 35 write 7: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
add: 0 1
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
run: writing to oarg 1 => (7 integer-address deref)
setm: (7 integer-address deref) <= 1
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1075
sz: (1077 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1075
addr: deref 1082 => 1077
setm: size of (7 integer-address deref) is 1
setm: (7 integer-address deref): setting 1077 to 1
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 0) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: 36 write 8: (reply (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1075
sz: (1 channel)
reply: ((1 channel)) ((1 channel-address deref))
reply: #(tagged record (0 1 1031 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (0 1 1031 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
setm: size of (1 channel-address deref) is 3
setm: (1 channel-address deref): setting 1038 to 0
setm: (1 channel-address deref): setting 1039 to 1
setm: (1 channel-address deref): setting 1040 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: 37 main 5: ((4 tagged-value) (1 channel-address deref) <- read (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032))
run: 38 read 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1106 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30))
run: 39 read 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 1 1031 . nil)))
setm: (1 channel) <= #(tagged record (0 1 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1106
setm: size of (1 channel) is 3
setm: (1 channel): setting 1107 to 0
setm: (1 channel): setting 1108 to 1
setm: (1 channel): setting 1109 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 0) (1108 1) (1109 1031))
run: 40 read 2: ((4 integer-address) <- get-address (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1106
record-info: initial base 1107 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel) (0 offset) => 1107
run: writing to oarg 1107 => (4 integer-address)
setm: (4 integer-address) <= 1107
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1106
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1110 to 1107
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 0) (1108 1) (1109 1031) (1110 1107))
run: 41 read 3: ((5 tagged-value-array-address) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1106
record-info: initial base 1107 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (2 offset) => 1109 tagged-value-array-address
m: (1109 tagged-value-array-address global)
sz: (1109 tagged-value-array-address global)
addr: (1109 tagged-value-array-address global)
addr: initial result: 1109
run: writing to oarg 1031 => (5 tagged-value-array-address)
setm: (5 tagged-value-array-address) <= 1031
sz: (5 tagged-value-array-address)
addr: (5 tagged-value-array-address)
addr: initial result: 5
addr: incrementing by 1106
setm: size of (5 tagged-value-array-address) is 1
setm: (5 tagged-value-array-address): setting 1111 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 0) (1108 1) (1109 1031) (1110 1107) (1111 1031))
run: 42 read 4: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref))
array-info: (5 tagged-value-array-address deref) (4 integer-address deref)
addr: (5 tagged-value-array-address deref)
addr: initial result: 5
addr: incrementing by 1106
addr: deref 1111 => 1031
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1106
sz: (1107 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1106
addr: deref 1110 => 1107
array-info: initial base 1031 type ((address t) (elem tagged-value-array) (size 1))
array-info: (5 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (5 tagged-value-array-address deref)
m: (5 integer-address deref)
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1106
sz: (1031 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1106
addr: deref 1111 => 1031
array-info: array-len of (5 tagged-value-array-address deref) is 3
index: (5 tagged-value-array-address deref) (4 integer-address deref) => 1032 tagged-value
m: (1032 tagged-value global)
sz: (1032 tagged-value global)
addr: (1032 tagged-value global)
addr: initial result: 1032
sz: (1032 tagged-value global)
run: writing to oarg #(tagged record (integer-address 1041 . nil)) => (6 tagged-value)
setm: (6 tagged-value) <= #(tagged record (integer-address 1041 . nil))
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1106
setm: size of (6 tagged-value) is 2
setm: (6 tagged-value): setting 1112 to integer-address
setm: (6 tagged-value): setting 1113 to 1041
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 0) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041))
run: 43 read 5: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal))
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1106
sz: (1107 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1106
addr: deref 1110 => 1107
add: 0 1
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1106
sz: (1107 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1106
addr: deref 1110 => 1107
run: writing to oarg 1 => (4 integer-address deref)
setm: (4 integer-address deref) <= 1
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1106
sz: (1107 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1106
addr: deref 1110 => 1107
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1107 to 1
run: -- ((1 1038) (2 1041) (3 1073) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 0) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041))
run: 44 read 6: (reply (6 tagged-value) (1 channel))
m: (6 tagged-value)
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1106
sz: (6 tagged-value)
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1106
sz: (1 channel)
reply: ((6 tagged-value) (1 channel)) ((4 tagged-value) (1 channel-address deref))
reply: #(tagged record (integer-address 1041 . nil)) => (4 tagged-value)
setm: (4 tagged-value) <= #(tagged record (integer-address 1041 . nil))
sz: (4 tagged-value)
addr: (4 tagged-value)
addr: initial result: 4
setm: size of (4 tagged-value) is 2
setm: (4 tagged-value): setting 4 to integer-address
setm: (4 tagged-value): setting 5 to 1041
reply: #(tagged record (1 1 1031 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (1 1 1031 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
setm: size of (1 channel-address deref) is 3
setm: (1 channel-address deref): setting 1038 to 1
setm: (1 channel-address deref): setting 1039 to 1
setm: (1 channel-address deref): setting 1040 to 1031
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041))
run: 45 main 6: ((5 integer-address) <- maybe-coerce (4 tagged-value) (integer-address literal))
m: (4 tagged-value)
sz: (4 tagged-value)
addr: (4 tagged-value)
addr: initial result: 4
sz: (4 tagged-value)
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041))
run: 46 maybe-coerce 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1137 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30))
run: 47 maybe-coerce 1: ((1 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1168 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1168
sz: (1 tagged-value-address)
addr: (1 tagged-value-address)
addr: initial result: 1
addr: incrementing by 1137
setm: size of (1 tagged-value-address) is 1
setm: (1 tagged-value-address): setting 1138 to 1168
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30) (1138 1168))
run: 48 maybe-coerce 2: ((1 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer-address 1041 . nil)) integer-address)
setm: (1 tagged-value-address deref) <= #(tagged record (integer-address 1041 . nil))
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1137
sz: (1168 tagged-value)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1137
addr: deref 1138 => 1168
setm: size of (1 tagged-value-address deref) is 2
setm: (1 tagged-value-address deref): setting 1168 to integer-address
setm: (1 tagged-value-address deref): setting 1169 to 1041
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30) (1138 1168) (1168 integer-address) (1169 1041))
run: 49 maybe-coerce 3: ((2 type) <- arg)
arg: nil 1 (#(tagged record (integer-address 1041 . nil)) integer-address)
setm: (2 type) <= integer-address
sz: (2 type)
addr: (2 type)
addr: initial result: 2
addr: incrementing by 1137
setm: size of (2 type) is 1
setm: (2 type): setting 1139 to integer-address
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30) (1138 1168) (1139 integer-address) (1168 integer-address) (1169 1041))
run: 50 maybe-coerce 4: ((3 type) <- get (1 tagged-value-address deref) (0 offset))
record-info: (1 tagged-value-address deref) (0 offset)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1137
addr: deref 1138 => 1168
record-info: initial base 1168 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get: (1 tagged-value-address deref) (0 offset) => 1168 type
m: (1168 type global)
sz: (1168 type global)
addr: (1168 type global)
addr: initial result: 1168
run: writing to oarg integer-address => (3 type)
setm: (3 type) <= integer-address
sz: (3 type)
addr: (3 type)
addr: initial result: 3
addr: incrementing by 1137
setm: size of (3 type) is 1
setm: (3 type): setting 1140 to integer-address
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30) (1138 1168) (1139 integer-address) (1140 integer-address) (1168 integer-address) (1169 1041))
run: 51 maybe-coerce 5: ((4 boolean) <- eq (3 type) (2 type))
m: (3 type)
sz: (3 type)
addr: (3 type)
addr: initial result: 3
addr: incrementing by 1137
m: (2 type)
sz: (2 type)
addr: (2 type)
addr: initial result: 2
addr: incrementing by 1137
run: writing to oarg t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1137
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1141 to t
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30) (1138 1168) (1139 integer-address) (1140 integer-address) (1141 t) (1168 integer-address) (1169 1041))
run: 52 maybe-coerce 6: (jump-if (4 boolean) (1 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1137
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30) (1138 1168) (1139 integer-address) (1140 integer-address) (1141 t) (1168 integer-address) (1169 1041))
run: 53 maybe-coerce 8: ((5 location) <- get (1 tagged-value-address deref) (1 offset))
record-info: (1 tagged-value-address deref) (1 offset)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1137
addr: deref 1138 => 1168
record-info: initial base 1168 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (record t) (size 2))
get: (1 tagged-value-address deref) (1 offset) => 1169 location
m: (1169 location global)
sz: (1169 location global)
addr: (1169 location global)
addr: initial result: 1169
run: writing to oarg 1041 => (5 location)
setm: (5 location) <= 1041
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1137
setm: size of (5 location) is 1
setm: (5 location): setting 1142 to 1041
run: -- ((1 1038) (2 1041) (3 1073) (4 integer-address) (5 1041) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1038) (1005 1039) (1006 1040) (1031 3) (1032 integer-address) (1033 1041) (1038 1) (1039 1) (1040 1031) (1041 34) (1042 30) (1043 integer-address) (1044 1) (1045 t) (1046 1073) (1047 1073) (1048 1074) (1073 integer-address) (1074 1041) (1075 30) (1076 0) (1077 1) (1078 1031) (1079 integer-address) (1080 1041) (1081 1031) (1082 1077) (1083 1032) (1106 30) (1107 1) (1108 1) (1109 1031) (1110 1107) (1111 1031) (1112 integer-address) (1113 1041) (1137 30) (1138 1168) (1139 integer-address) (1140 integer-address) (1141 t) (1142 1041) (1168 integer-address) (1169 1041))
run: 54 maybe-coerce 9: (reply (5 location) (4 boolean))
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1137
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1137
reply: ((5 location) (4 boolean)) ((5 integer-address))
reply: 1041 => (5 integer-address)
setm: (5 integer-address) <= 1041
sz: (5 integer-address)
addr: (5 integer-address)
addr: initial result: 5
setm: size of (5 integer-address) is 1
setm: (5 integer-address): setting 5 to 1041
