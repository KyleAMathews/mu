c{0: 0 ((2 integer) <- copy (1 literal)) -- nil
c{0: 1 ((1 boolean) <- eq (1 literal) (2 integer)) -- nil
c{0: 2 (jump-if (1 boolean) (1 offset)) -- nil
c{0: 3 ((2 integer) <- copy (3 literal)) -- nil
c{0: 4 (reply) -- nil
c{0: 5 ((3 integer) <- copy (34 literal)) -- nil
c{1: 0 copy ((2 integer))
c{1: 1 eq ((1 boolean))
c{1: 2 jump-if nil
c{1: 3 copy ((2 integer))
c{1: 4 reply nil
c{1: 5 copy ((3 integer))
cn0: ((2 integer) <- copy (1 literal)) nil nil
maybe-add: (1 literal)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((1 boolean) <- eq (1 literal) (2 integer)) nil nil
maybe-add: (1 literal)
maybe-add: (2 integer)
cn0: checking (1 boolean)
maybe-add: (1 boolean)
cn0: (jump-if (1 boolean) (1 offset)) nil nil
maybe-add: (1 boolean)
maybe-add: (1 offset)
cn0: ((2 integer) <- copy (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: (reply) nil nil
cn0: ((3 integer) <- copy (34 literal)) nil nil
maybe-add: (34 literal)
cn0: checking (3 integer)
maybe-add: (3 integer)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((2 integer) <- copy (1 literal))
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 1
run: -- ((2 1))
run: 2 main 1: ((1 boolean) <- eq (1 literal) (2 integer))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
run: writing to oarg t => (1 boolean)
setm: (1 boolean) <= t
sz: (1 boolean)
addr: (1 boolean)
addr: initial result: 1
setm: size of (1 boolean) is 1
setm: (1 boolean): setting 1 to t
run: -- ((1 t) (2 1))
run: 3 main 2: (jump-if (1 boolean) (1 offset))
m: (1 boolean)
sz: (1 boolean)
addr: (1 boolean)
addr: initial result: 1
run: -- ((1 t) (2 1))
run: 4 main 4: (reply)
