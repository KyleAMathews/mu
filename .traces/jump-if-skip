cvt0: 0 ((2 integer) <- copy (1 literal)) -- nil
cvt0: 1 ((1 boolean) <- eq (1 literal) (2 integer)) -- nil
cvt0: 2 (jump-if (1 boolean) (1 offset)) -- nil
cvt0: 3 ((2 integer) <- copy (3 literal)) -- nil
cvt0: 4 (reply) -- nil
cvt0: 5 ((3 integer) <- copy (34 literal)) -- nil
cvt1: 0 copy ((2 integer))
cvt1: 1 eq ((1 boolean))
cvt1: 2 jump-if nil
cvt1: 3 copy ((2 integer))
cvt1: 4 reply nil
cvt1: 5 copy ((3 integer))
schedule: main
run: -- nil
run: main 0: ((2 integer) <- copy (1 literal))
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 1
run: -- ((2 1))
run: main 1: ((1 boolean) <- eq (1 literal) (2 integer))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
run: writing to oarg t => (1 boolean)
setm: (1 boolean) <= t
sz: (1 boolean)
addr: (1 boolean)
addr: initial result: 1
setm: size of (1 boolean) is 1
setm: (1 boolean): setting 1 to t
run: -- ((1 t) (2 1))
run: main 2: (jump-if (1 boolean) (1 offset))
m: (1 boolean)
sz: (1 boolean)
addr: (1 boolean)
addr: initial result: 1
run: -- ((1 t) (2 1))
run: main 4: (reply)
