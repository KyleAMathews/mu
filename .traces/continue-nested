cvt0: 0 ((1 integer) <- copy (4 literal)) -- nil
cvt0: 1 ((2 integer) <- copy (1 literal)) -- nil
cvt0: 2 ((2 integer) <- add (2 integer) (2 integer)) -- ((open 2))
cvt0: 3 ((3 boolean) <- neq (1 integer) (2 integer)) -- ((open 3) (open 2))
cvt0: 4 (continueif (3 boolean)) -- ((close 4) (open 3) (open 2))
cvt0: 5 ((4 integer) <- copy (34 literal)) -- ((close 4) (open 3) (open 2))
cvt0: 6 (reply) -- ((close 6) (close 4) (open 3) (open 2))
cvt1: 0 copy ((1 integer))
cvt1: 1 copy ((2 integer))
cvt1: 2 begin nil
cvt1: 2 add ((2 integer))
cvt1: 3 begin nil
cvt1: 3 neq ((3 boolean))
cvt1: 4 continueif nil
cvt0: continueif: (continueif (3 boolean)) => 1
cvt1: 5 copy ((4 integer))
cvt1: 6 reply nil
cvt0: 0 ((1 integer) <- copy (4 literal)) -- nil
cvt0: 1 ((2 integer) <- copy (1 literal)) -- nil
cvt0: 2 ((2 integer) <- add (2 integer) (2 integer)) -- nil
cvt0: 3 ((3 boolean) <- neq (1 integer) (2 integer)) -- nil
cvt0: 4 (jif (3 boolean) (-3 offset)) -- nil
cvt0: 5 ((4 integer) <- copy (34 literal)) -- nil
cvt0: 6 (reply) -- nil
cvt1: 0 copy ((1 integer))
cvt1: 1 copy ((2 integer))
cvt1: 2 add ((2 integer))
cvt1: 3 neq ((3 boolean))
cvt1: 4 jif nil
cvt1: 5 copy ((4 integer))
cvt1: 6 reply nil
schedule: main
run: main 0: ((1 integer) <- copy (4 literal))
run: main 1: ((2 integer) <- copy (1 literal))
run: main 2: ((2 integer) <- add (2 integer) (2 integer))
add: 1 1
run: main 3: ((3 boolean) <- neq (1 integer) (2 integer))
neq: 4 2
run: main 4: (jif (3 boolean) (-3 offset))
run: main 2: ((2 integer) <- add (2 integer) (2 integer))
add: 2 2
run: main 3: ((3 boolean) <- neq (1 integer) (2 integer))
neq: 4 4
run: main 4: (jif (3 boolean) (-3 offset))
run: main 5: ((4 integer) <- copy (34 literal))
run: main 6: (reply)
