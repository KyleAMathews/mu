c{0: 0 ((1 integer) <- copy (0 literal)) -- nil
c{0: 1 (sleep (1 integer)) -- nil
c{0: 2 ((2 integer) <- add (1 integer) (1 literal)) -- nil
c{1: 0 copy ((1 integer))
c{1: 1 sleep nil
c{1: 2 add ((2 integer))
cn0: ((1 integer) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (1 integer)
maybe-add: (1 integer)
cn0: (sleep (1 integer)) nil nil
maybe-add: (1 integer)
cn0: ((2 integer) <- add (1 integer) (1 literal)) nil nil
maybe-add: (1 integer)
maybe-add: (1 literal)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn1: update names nil nil
c{0: 0 (sleep (30 literal)) -- nil
c{0: 1 ((1 integer) <- copy (3 literal)) -- nil
c{1: 0 sleep nil
c{1: 1 copy ((1 integer))
cn0: (sleep (30 literal)) nil nil
maybe-add: (30 literal)
cn0: ((1 integer) <- copy (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (1 integer)
maybe-add: (1 integer)
cn1: update names nil nil
schedule: f1
run: -- nil
run: 1 f1 0: ((1 integer) <- copy (0 literal))
run: 0 => (1 integer)
setm: (1 integer) <= 0
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 0
schedule: f2
run: -- ((1 0))
run: 2 f2 0: (sleep (30 literal))
run: sleeping until 32
schedule: pushing f2 to sleep queue
schedule: f1
run: -- ((1 0))
run: 3 f1 1: (sleep (1 integer))
schedule: pushing f1 to sleep queue
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 3
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 4
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 5
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 6
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 7
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 8
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 9
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 10
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 11
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 12
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 13
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 14
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 15
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 16
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 17
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 18
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 19
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 20
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 21
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 22
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 23
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 24
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 25
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 26
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 27
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 28
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 29
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 30
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 31
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: skipping cycle 32
schedule: waking up f2
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: f2
run: -- ((1 0))
run: 34 f2 1: ((1 integer) <- copy (3 literal))
run: 3 => (1 integer)
setm: (1 integer) <= 3
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 3
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
schedule: waking up f1
schedule: f2
schedule: f1
run: -- ((1 3))
run: 35 f1 2: ((2 integer) <- add (1 integer) (1 literal))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
add: 3 1
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
run: 4 => (2 integer)
setm: (2 integer) <= 4
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 4
schedule: f1
