cvt0: 0 ((1 integer) <- copy (2 literal)) -- nil
cvt0: 1 ((2 integer) <- copy (1 literal)) -- nil
cvt0: 2 ((2 integer) <- add (2 integer) (2 integer)) -- nil
cvt0: 3 ((3 boolean) <- eq (1 integer) (2 integer)) -- nil
cvt0: 4 (jump-if (3 boolean) (-3 offset)) -- nil
cvt0: 5 ((4 integer) <- copy (3 literal)) -- nil
cvt0: 6 (reply) -- nil
cvt0: 7 ((3 integer) <- copy (34 literal)) -- nil
cvt1: 0 copy ((1 integer))
cvt1: 1 copy ((2 integer))
cvt1: 2 add ((2 integer))
cvt1: 3 eq ((3 boolean))
cvt1: 4 jump-if nil
cvt1: 5 copy ((4 integer))
cvt1: 6 reply nil
cvt1: 7 copy ((3 integer))
schedule: main
run: -- nil
run: main 0: ((1 integer) <- copy (2 literal))
run: writing to oarg 2 => (1 integer)
setm: (1 integer) <= 2
sz: (1 integer)
setm: size of (1 integer) is 1
run: -- ((1 2))
run: main 1: ((2 integer) <- copy (1 literal))
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
setm: size of (2 integer) is 1
run: -- ((1 2) (2 1))
run: main 2: ((2 integer) <- add (2 integer) (2 integer))
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
add: 1 1
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
run: writing to oarg 2 => (2 integer)
setm: (2 integer) <= 2
sz: (2 integer)
setm: size of (2 integer) is 1
run: -- ((1 2) (2 2))
run: main 3: ((3 boolean) <- eq (1 integer) (2 integer))
sz: (1 integer)
m: (1 integer) 1
sz: (1 integer)
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
setm: size of (3 boolean) is 1
run: -- ((1 2) (2 2) (3 t))
run: main 4: (jump-if (3 boolean) (-3 offset))
sz: (3 boolean)
m: (3 boolean) 1
sz: (3 boolean)
run: -- ((1 2) (2 2) (3 t))
run: main 2: ((2 integer) <- add (2 integer) (2 integer))
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
add: 2 2
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
run: writing to oarg 4 => (2 integer)
setm: (2 integer) <= 4
sz: (2 integer)
setm: size of (2 integer) is 1
run: -- ((1 2) (2 4) (3 t))
run: main 3: ((3 boolean) <- eq (1 integer) (2 integer))
sz: (1 integer)
m: (1 integer) 1
sz: (1 integer)
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
run: writing to oarg nil => (3 boolean)
setm: (3 boolean) <= nil
sz: (3 boolean)
setm: size of (3 boolean) is 1
run: -- ((1 2) (2 4))
run: main 4: (jump-if (3 boolean) (-3 offset))
sz: (3 boolean)
m: (3 boolean) 1
sz: (3 boolean)
run: -- ((1 2) (2 4))
run: main 5: ((4 integer) <- copy (3 literal))
run: writing to oarg 3 => (4 integer)
setm: (4 integer) <= 3
sz: (4 integer)
setm: size of (4 integer) is 1
run: -- ((1 2) (2 4) (4 3))
run: main 6: (reply)
