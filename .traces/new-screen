cvt0: 0 (cls) -- nil
cvt0: 1 (cursor (10 literal) (5 literal)) -- nil
cvt0: 2 (print (Hello,  literal)) -- nil
cvt0: 3 (bold-mode) -- nil
cvt0: 4 (print (you literal)) -- nil
cvt0: 5 (non-bold-mode) -- nil
cvt0: 6 (print (. literal)) -- nil
cvt0: 7 (cursor (1 literal) (1 literal)) -- nil
cvt0: 8 (print (Press a key... literal)) -- nil
cvt0: 9 ((key string) <- getc) -- nil
cvt0: 10 (console-off) -- nil
cvt0: 11 (print (You pressed:  literal)) -- nil
cvt0: 12 (print (key string)) -- nil
cvt0: 13 (print (
 literal)) -- nil
cvt1: 0 cls nil
cvt1: 1 cursor nil
cvt1: 2 print nil
cvt1: 3 bold-mode nil
cvt1: 4 print nil
cvt1: 5 non-bold-mode nil
cvt1: 6 print nil
cvt1: 7 cursor nil
cvt1: 8 print nil
cvt1: 9 getc ((key string))
cvt1: 10 console-off nil
cvt1: 11 print nil
cvt1: 12 print nil
cvt1: 13 print nil
cvt0: 0 ((nrows integer) <- arg) -- nil
cvt0: 1 ((ncols integer) <- arg) -- nil
cvt0: 2 ((result screen-address) <- new (screen type) (nrows integer)) -- nil
cvt0: 3 ((result integer-address deref) <- copy (nrows integer)) -- nil
cvt0: 4 ((rowidx integer) <- copy (0 literal)) -- nil
cvt0: 5 ((curr-line-address-address line-address-address) <- index-address (result screen-address deref) (rowidx integer)) -- ((open 5))
cvt0: 6 ((curr-line-address-address line-address-address deref) <- new (line type) (ncols integer)) -- ((open 5))
cvt0: 7 ((curr-line-address line-address) <- copy (curr-line-address-address line-address-address deref)) -- ((open 5))
cvt0: 8 ((curr-line-address integer-address deref) <- copy (ncols integer)) -- ((open 5))
cvt0: 9 ((rowidx integer) <- add (rowidx integer) (1 literal)) -- ((open 5))
cvt0: 10 ((x boolean) <- neq (rowidx integer) (nrows integer)) -- ((open 5))
cvt0: 11 (continueif (x boolean)) -- ((open 5))
cvt0: 12 (reply (result screen-address)) -- ((close 12) (open 5))
cvt1: 0 arg ((nrows integer))
cvt1: 1 arg ((ncols integer))
cvt1: 2 new ((result screen-address))
cvt1: 3 copy ((result integer-address deref))
cvt1: 4 copy ((rowidx integer))
cvt1: 5 begin nil
cvt1: 5 index-address ((curr-line-address-address line-address-address))
cvt1: 6 new ((curr-line-address-address line-address-address deref))
cvt1: 7 copy ((curr-line-address line-address))
cvt1: 8 copy ((curr-line-address integer-address deref))
cvt1: 9 add ((rowidx integer))
cvt1: 10 neq ((x boolean))
cvt1: 11 continueif nil
cvt0: continueif: (continueif (x boolean)) => 4
cvt1: 12 reply nil
cvt0: 0 ((curr-screen screen-address) <- new-screen (5 literal) (5 literal)) -- nil
cvt1: 0 new-screen ((curr-screen screen-address))
schedule: test-new-screen
run: test-new-screen 0: ((curr-screen screen-address) <- new-screen (5 literal) (5 literal))
run: new-screen 0: ((nrows integer) <- arg)
run: new-screen 1: ((ncols integer) <- arg)
run: new-screen 2: ((result screen-address) <- new (screen type) (nrows integer))
run: new-screen 3: ((result integer-address deref) <- copy (nrows integer))
run: new-screen 4: ((rowidx integer) <- copy (0 literal))
run: new-screen 5: ((curr-line-address-address line-address-address) <- index-address (result screen-address deref) (rowidx integer))
run: new-screen 6: ((curr-line-address-address line-address-address deref) <- new (line type) (ncols integer))
run: new-screen 7: ((curr-line-address line-address) <- copy (curr-line-address-address line-address-address deref))
run: new-screen 8: ((curr-line-address integer-address deref) <- copy (ncols integer))
run: new-screen 9: ((rowidx integer) <- add (rowidx integer) (1 literal))
add: 0 1
run: new-screen 10: ((x boolean) <- neq (rowidx integer) (nrows integer))
neq: 1 5
run: new-screen 11: (jif (x boolean) (-7 offset))
run: new-screen 5: ((curr-line-address-address line-address-address) <- index-address (result screen-address deref) (rowidx integer))
run: new-screen 6: ((curr-line-address-address line-address-address deref) <- new (line type) (ncols integer))
run: new-screen 7: ((curr-line-address line-address) <- copy (curr-line-address-address line-address-address deref))
run: new-screen 8: ((curr-line-address integer-address deref) <- copy (ncols integer))
run: new-screen 9: ((rowidx integer) <- add (rowidx integer) (1 literal))
add: 1 1
run: new-screen 10: ((x boolean) <- neq (rowidx integer) (nrows integer))
neq: 2 5
run: new-screen 11: (jif (x boolean) (-7 offset))
run: new-screen 5: ((curr-line-address-address line-address-address) <- index-address (result screen-address deref) (rowidx integer))
run: new-screen 6: ((curr-line-address-address line-address-address deref) <- new (line type) (ncols integer))
run: new-screen 7: ((curr-line-address line-address) <- copy (curr-line-address-address line-address-address deref))
run: new-screen 8: ((curr-line-address integer-address deref) <- copy (ncols integer))
run: new-screen 9: ((rowidx integer) <- add (rowidx integer) (1 literal))
add: 2 1
run: new-screen 10: ((x boolean) <- neq (rowidx integer) (nrows integer))
neq: 3 5
run: new-screen 11: (jif (x boolean) (-7 offset))
run: new-screen 5: ((curr-line-address-address line-address-address) <- index-address (result screen-address deref) (rowidx integer))
run: new-screen 6: ((curr-line-address-address line-address-address deref) <- new (line type) (ncols integer))
run: new-screen 7: ((curr-line-address line-address) <- copy (curr-line-address-address line-address-address deref))
run: new-screen 8: ((curr-line-address integer-address deref) <- copy (ncols integer))
run: new-screen 9: ((rowidx integer) <- add (rowidx integer) (1 literal))
add: 3 1
run: new-screen 10: ((x boolean) <- neq (rowidx integer) (nrows integer))
neq: 4 5
run: new-screen 11: (jif (x boolean) (-7 offset))
run: new-screen 5: ((curr-line-address-address line-address-address) <- index-address (result screen-address deref) (rowidx integer))
run: new-screen 6: ((curr-line-address-address line-address-address deref) <- new (line type) (ncols integer))
run: new-screen 7: ((curr-line-address line-address) <- copy (curr-line-address-address line-address-address deref))
run: new-screen 8: ((curr-line-address integer-address deref) <- copy (ncols integer))
run: new-screen 9: ((rowidx integer) <- add (rowidx integer) (1 literal))
add: 4 1
run: new-screen 10: ((x boolean) <- neq (rowidx integer) (nrows integer))
neq: 5 5
run: new-screen 11: (jif (x boolean) (-7 offset))
run: new-screen 12: (reply (result screen-address))
