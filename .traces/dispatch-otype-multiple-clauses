cvt0: 0 ((4 type) <- otype 0) -- nil
cvt0: 1 ((5 boolean) <- eq (4 type) (integer literal)) -- ((open 1))
cvt0: 2 (break-unless (5 boolean)) -- ((open 1))
cvt0: 3 ((6 integer) <- arg) -- ((open 1))
cvt0: 4 ((7 integer) <- arg) -- ((open 1))
cvt0: 5 ((8 integer) <- add (6 integer) (7 integer)) -- ((open 1))
cvt0: 6 (reply (8 integer)) -- ((open 1))
cvt0: 7 ((5 boolean) <- eq (4 type) (boolean literal)) -- ((open 7) (close 7) (open 1))
cvt0: 8 (break-unless (5 boolean) (4 offset)) -- ((open 7) (close 7) (open 1))
cvt0: 9 ((6 boolean) <- arg) -- ((open 7) (close 7) (open 1))
cvt0: 10 ((7 boolean) <- arg) -- ((open 7) (close 7) (open 1))
cvt0: 11 ((8 boolean) <- or (6 boolean) (7 boolean)) -- ((open 7) (close 7) (open 1))
cvt0: 12 (reply (8 boolean)) -- ((open 7) (close 7) (open 1))
cvt1: 0 otype ((4 type))
cvt1: 1 begin nil
cvt1: 1 eq ((5 boolean))
cvt1: 2 break-unless nil
cvt1: 3 arg ((6 integer))
cvt1: 4 arg ((7 integer))
cvt1: 5 add ((8 integer))
cvt1: 6 reply nil
cvt1: 7 begin nil
cvt1: 7 eq ((5 boolean))
cvt1: 8 break-unless nil
cvt1: 9 arg ((6 boolean))
cvt1: 10 arg ((7 boolean))
cvt1: 11 or ((8 boolean))
cvt1: 12 reply nil
cvt0: 0 ((1 boolean) <- test-fn (t literal) (t literal)) -- nil
cvt1: 0 test-fn ((1 boolean))
schedule: main
run: -- nil
run: main 0: ((1 boolean) <- test-fn (t literal) (t literal))
run: -- nil
run: test-fn 0: ((4 type) <- otype 0)
run: writing to oarg boolean => (4 type)
setm: (4 type) <= boolean
sz: (4 type)
setm: size of (4 type) is 1
run: -- ((4 boolean))
run: test-fn 1: ((5 boolean) <- eq (4 type) (integer literal))
sz: (4 type)
m: (4 type) 1
sz: (4 type)
sz: (integer literal)
m: (integer literal) literal
run: writing to oarg nil => (5 boolean)
setm: (5 boolean) <= nil
sz: (5 boolean)
setm: size of (5 boolean) is 1
run: -- ((4 boolean))
run: test-fn 2: (jump-unless (5 boolean) (4 offset))
sz: (5 boolean)
m: (5 boolean) 1
sz: (5 boolean)
run: -- ((4 boolean))
run: test-fn 7: ((5 boolean) <- eq (4 type) (boolean literal))
sz: (4 type)
m: (4 type) 1
sz: (4 type)
sz: (boolean literal)
m: (boolean literal) literal
run: writing to oarg t => (5 boolean)
setm: (5 boolean) <= t
sz: (5 boolean)
setm: size of (5 boolean) is 1
run: -- ((4 boolean) (5 t))
run: test-fn 8: (jump-unless (5 boolean) (4 offset))
sz: (5 boolean)
m: (5 boolean) 1
sz: (5 boolean)
run: -- ((4 boolean) (5 t))
run: test-fn 9: ((6 boolean) <- arg)
arg: nil 0 ((t literal) (t literal))
sz: (t literal)
m: (t literal) literal
setm: (6 boolean) <= t
sz: (6 boolean)
setm: size of (6 boolean) is 1
run: -- ((4 boolean) (5 t) (6 t))
run: test-fn 10: ((7 boolean) <- arg)
arg: nil 1 ((t literal) (t literal))
sz: (t literal)
m: (t literal) literal
setm: (7 boolean) <= t
sz: (7 boolean)
setm: size of (7 boolean) is 1
run: -- ((4 boolean) (5 t) (6 t) (7 t))
run: test-fn 11: ((8 boolean) <- or (6 boolean) (7 boolean))
sz: (6 boolean)
m: (6 boolean) 1
sz: (6 boolean)
run: writing to oarg t => (8 boolean)
setm: (8 boolean) <= t
sz: (8 boolean)
setm: size of (8 boolean) is 1
run: -- ((4 boolean) (5 t) (6 t) (7 t) (8 t))
run: test-fn 12: (reply (8 boolean))
reply: ((8 boolean)) ((1 boolean))
reply: (8 boolean) => (1 boolean)
sz: (8 boolean)
m: (8 boolean) 1
sz: (8 boolean)
setm: (1 boolean) <= t
sz: (1 boolean)
setm: size of (1 boolean) is 1
