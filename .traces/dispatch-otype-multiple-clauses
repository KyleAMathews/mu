cvt0: 0 ((4 type) <- otype 0) -- nil
cvt0: 1 ((5 boolean) <- neq (4 type) (integer literal)) -- nil
cvt0: 2 (jif (5 boolean) (4 offset)) -- nil
cvt0: 3 ((6 integer) <- arg) -- nil
cvt0: 4 ((7 integer) <- arg) -- nil
cvt0: 5 ((8 integer) <- add (6 integer) (7 integer)) -- nil
cvt0: 6 (reply (8 integer)) -- nil
cvt0: 7 ((5 boolean) <- neq (4 type) (boolean literal)) -- nil
cvt0: 8 (jif (5 boolean) (4 offset)) -- nil
cvt0: 9 ((6 boolean) <- arg) -- nil
cvt0: 10 ((7 boolean) <- arg) -- nil
cvt0: 11 ((8 boolean) <- or (6 boolean) (7 boolean)) -- nil
cvt0: 12 (reply (8 boolean)) -- nil
cvt1: 0 otype ((4 type))
cvt1: 1 neq ((5 boolean))
cvt1: 2 jif nil
cvt1: 3 arg ((6 integer))
cvt1: 4 arg ((7 integer))
cvt1: 5 add ((8 integer))
cvt1: 6 reply nil
cvt1: 7 neq ((5 boolean))
cvt1: 8 jif nil
cvt1: 9 arg ((6 boolean))
cvt1: 10 arg ((7 boolean))
cvt1: 11 or ((8 boolean))
cvt1: 12 reply nil
cvt0: 0 ((1 boolean) <- test-fn (t literal) (t literal)) -- nil
cvt1: 0 test-fn ((1 boolean))
schedule: main
run: main 0: ((1 boolean) <- test-fn (t literal) (t literal))
run: test-fn 0: ((4 type) <- otype 0)
run: test-fn 1: ((5 boolean) <- neq (4 type) (integer literal))
neq: boolean integer
run: test-fn 2: (jif (5 boolean) (4 offset))
run: test-fn 7: ((5 boolean) <- neq (4 type) (boolean literal))
neq: boolean boolean
run: test-fn 8: (jif (5 boolean) (4 offset))
run: test-fn 9: ((6 boolean) <- arg)
run: test-fn 10: ((7 boolean) <- arg)
run: test-fn 11: ((8 boolean) <- or (6 boolean) (7 boolean))
run: test-fn 12: (reply (8 boolean))
