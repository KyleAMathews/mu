c{0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
c{0: 1 ((2 tagged-value) (1 channel-address deref) <- read (1 channel-address deref)) -- nil
c{1: 0 new-channel ((1 channel-address))
c{1: 1 read ((2 tagged-value) (1 channel-address deref))
cn0: ((1 channel-address) <- new-channel (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 tagged-value) (1 channel-address deref) <- read (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 tagged-value)
maybe-add: (2 tagged-value)
cn0: checking (1 channel-address deref)
maybe-add: (1 channel-address deref)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 integer) <- arg)
arg: nil 0 (3)
setm: (1 integer) <= 3
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 3
run: -- ((1000 30) (1001 3))
run: 4 new-channel 2: ((2 tagged-value-array-address) <- new (tagged-value-array literal) (1 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (2 tagged-value-array-address)
setm: (2 tagged-value-array-address) <= 1031
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 tagged-value-array-address) is 1
setm: (2 tagged-value-array-address): setting 1002 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1031 3))
run: 5 new-channel 3: ((3 channel-address) <- new (channel literal))
sizeof: channel
sizeof: boolean
sizeof: boolean
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1038 => (3 channel-address)
setm: (3 channel-address) <= 1038
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 channel-address) is 1
setm: (3 channel-address): setting 1003 to 1038
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1031 3))
run: 6 new-channel 4: ((4 integer-address) <- get-address (3 channel-address deref) (2 offset))
record-info: (3 channel-address deref) (2 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (2 offset) => 1040
run: writing to oarg 1040 => (4 integer-address)
setm: (4 integer-address) <= 1040
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1004 to 1040
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1031 3))
run: 7 new-channel 5: ((4 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (4 integer-address deref)
setm: (4 integer-address deref) <= 0
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1000
sz: (1040 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1040
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1040 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1031 3) (1040 0))
run: 8 new-channel 6: ((5 integer-address) <- get-address (3 channel-address deref) (3 offset))
record-info: (3 channel-address deref) (3 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (3 offset) => 1041
run: writing to oarg 1041 => (5 integer-address)
setm: (5 integer-address) <= 1041
sz: (5 integer-address)
addr: (5 integer-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 integer-address) is 1
setm: (5 integer-address): setting 1005 to 1041
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1031 3) (1040 0))
run: 9 new-channel 7: ((5 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (5 integer-address deref)
setm: (5 integer-address deref) <= 0
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1041 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1041
setm: size of (5 integer-address deref) is 1
setm: (5 integer-address deref): setting 1041 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1031 3) (1040 0) (1041 0))
run: 10 new-channel 8: ((6 tagged-value-array-address-address) <- get-address (3 channel-address deref) (4 offset))
record-info: (3 channel-address deref) (4 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (4 offset) => 1042
run: writing to oarg 1042 => (6 tagged-value-array-address-address)
setm: (6 tagged-value-array-address-address) <= 1042
sz: (6 tagged-value-array-address-address)
addr: (6 tagged-value-array-address-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-array-address-address) is 1
setm: (6 tagged-value-array-address-address): setting 1006 to 1042
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0))
run: 11 new-channel 9: ((6 tagged-value-array-address-address deref) <- copy (2 tagged-value-array-address))
m: (2 tagged-value-array-address)
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
run: writing to oarg 1031 => (6 tagged-value-array-address-address deref)
setm: (6 tagged-value-array-address-address deref) <= 1031
sz: (6 tagged-value-array-address-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1042 tagged-value-array-address)
addr: (6 tagged-value-array-address-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1042
setm: size of (6 tagged-value-array-address-address deref) is 1
setm: (6 tagged-value-array-address-address deref): setting 1042 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 12 new-channel 10: (reply (3 channel-address))
m: (3 channel-address)
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
reply: ((3 channel-address)) ((1 channel-address))
reply: 1038 => (1 channel-address)
setm: (1 channel-address) <= 1038
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1038
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 13 main 1: ((2 tagged-value) (1 channel-address deref) <- read (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1038 channel)
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 14 read 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1043 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30))
run: 15 read 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1031 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1043
setm: size of (1 channel) is 5
setm: (1 channel): setting 1044 to nil
setm: (1 channel): setting 1045 to nil
setm: (1 channel): setting 1046 to 0
setm: (1 channel): setting 1047 to 0
setm: (1 channel): setting 1048 to 1031
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031))
run: 16 read 2: ((6 boolean) <- empty? (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1043
sz: (1 channel)
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031))
run: 17 empty? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1074 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1074 30))
run: 18 empty? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1031 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1074
setm: size of (1 channel) is 5
setm: (1 channel): setting 1075 to nil
setm: (1 channel): setting 1076 to nil
setm: (1 channel): setting 1077 to 0
setm: (1 channel): setting 1078 to 0
setm: (1 channel): setting 1079 to 1031
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1074 30) (1077 0) (1078 0) (1079 1031))
run: 19 empty? 2: ((6 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1074
record-info: initial base 1075 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1077 integer
m: (1077 integer global)
sz: (1077 integer global)
addr: (1077 integer global)
addr: initial result: 1077
run: writing to oarg 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1074
setm: size of (6 integer) is 1
setm: (6 integer): setting 1080 to 0
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1074 30) (1077 0) (1078 0) (1079 1031) (1080 0))
run: 20 empty? 3: ((7 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1074
record-info: initial base 1075 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1078 integer
m: (1078 integer global)
sz: (1078 integer global)
addr: (1078 integer global)
addr: initial result: 1078
run: writing to oarg 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1074
setm: size of (7 integer) is 1
setm: (7 integer): setting 1081 to 0
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1074 30) (1077 0) (1078 0) (1079 1031) (1080 0) (1081 0))
run: 21 empty? 4: ((8 boolean) <- eq (6 integer) (7 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1074
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1074
run: writing to oarg t => (8 boolean)
setm: (8 boolean) <= t
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1074
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1082 to t
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1074 30) (1077 0) (1078 0) (1079 1031) (1080 0) (1081 0) (1082 t))
run: 22 empty? 5: (reply (8 boolean))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1074
reply: ((8 boolean)) ((6 boolean))
reply: t => (6 boolean)
setm: (6 boolean) <= t
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1043
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1049 to t
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1049 t) (1074 30) (1077 0) (1078 0) (1079 1031) (1080 0) (1081 0) (1082 t))
run: 23 read 3: (jump-unless (6 boolean) (3 offset))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1043
jump: checking that t is not t
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1049 t) (1074 30) (1077 0) (1078 0) (1079 1031) (1080 0) (1081 0) (1082 t))
run: 24 read 4: ((7 boolean-address) <- get-address (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1043
record-info: initial base 1044 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (0 offset) => 1044
run: writing to oarg 1044 => (7 boolean-address)
setm: (7 boolean-address) <= 1044
sz: (7 boolean-address)
addr: (7 boolean-address)
addr: initial result: 7
addr: incrementing by 1043
setm: size of (7 boolean-address) is 1
setm: (7 boolean-address): setting 1050 to 1044
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1049 t) (1050 1044) (1074 30) (1077 0) (1078 0) (1079 1031) (1080 0) (1081 0) (1082 t))
run: 25 read 5: ((7 boolean-address deref) <- copy (nil literal))
run: writing to oarg nil => (7 boolean-address deref)
setm: (7 boolean-address deref) <= nil
sz: (7 boolean-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1043
sz: (1044 boolean)
addr: (7 boolean-address deref)
addr: initial result: 7
addr: incrementing by 1043
addr: deref 1050 => 1044
setm: size of (7 boolean-address deref) is 1
setm: (7 boolean-address deref): setting 1044 to nil
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031) (1043 30) (1046 0) (1047 0) (1048 1031) (1049 t) (1050 1044) (1074 30) (1077 0) (1078 0) (1079 1031) (1080 0) (1081 0) (1082 t))
run: 26 read 6: (sleep (7 boolean-address deref))
schedule: pushing read to sleep queue
schedule: skipping cycle 26
