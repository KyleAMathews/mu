cvt0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
cvt0: 1 ((2 integer) <- get (1 channel-address deref) (first-full offset)) -- nil
cvt0: 2 ((3 integer) <- get (1 channel-address deref) (first-free offset)) -- nil
cvt1: 0 new-channel ((1 channel-address))
cvt1: 1 get ((2 integer))
cvt1: 2 get ((3 integer))
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 integer) <- arg)
arg: nil 0 (3)
setm: (1 integer) <= 3
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 3
run: -- ((1000 30) (1001 3))
run: 4 new-channel 2: ((2 tagged-value-array-address) <- new (tagged-value-array literal) (1 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (2 tagged-value-array-address)
setm: (2 tagged-value-array-address) <= 1031
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 tagged-value-array-address) is 1
setm: (2 tagged-value-array-address): setting 1002 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1031 3))
run: 5 new-channel 3: ((3 channel-address) <- new (channel literal))
sizeof: channel
sizeof: boolean
sizeof: boolean
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1038 => (3 channel-address)
setm: (3 channel-address) <= 1038
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 channel-address) is 1
setm: (3 channel-address): setting 1003 to 1038
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1031 3))
run: 6 new-channel 4: ((4 integer-address) <- get-address (3 channel-address deref) (2 offset))
record-info: (3 channel-address deref) (2 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (2 offset) => 1040
run: writing to oarg 1040 => (4 integer-address)
setm: (4 integer-address) <= 1040
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1004 to 1040
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1031 3))
run: 7 new-channel 5: ((4 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (4 integer-address deref)
setm: (4 integer-address deref) <= 0
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1000
sz: (1040 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1040
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1040 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1031 3) (1040 0))
run: 8 new-channel 6: ((5 integer-address) <- get-address (3 channel-address deref) (3 offset))
record-info: (3 channel-address deref) (3 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (3 offset) => 1041
run: writing to oarg 1041 => (5 integer-address)
setm: (5 integer-address) <= 1041
sz: (5 integer-address)
addr: (5 integer-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 integer-address) is 1
setm: (5 integer-address): setting 1005 to 1041
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1031 3) (1040 0))
run: 9 new-channel 7: ((5 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (5 integer-address deref)
setm: (5 integer-address deref) <= 0
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1041 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1041
setm: size of (5 integer-address deref) is 1
setm: (5 integer-address deref): setting 1041 to 0
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1031 3) (1040 0) (1041 0))
run: 10 new-channel 8: ((6 tagged-value-array-address-address) <- get-address (3 channel-address deref) (4 offset))
record-info: (3 channel-address deref) (4 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (4 offset) => 1042
run: writing to oarg 1042 => (6 tagged-value-array-address-address)
setm: (6 tagged-value-array-address-address) <= 1042
sz: (6 tagged-value-array-address-address)
addr: (6 tagged-value-array-address-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-array-address-address) is 1
setm: (6 tagged-value-array-address-address): setting 1006 to 1042
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0))
run: 11 new-channel 9: ((6 tagged-value-array-address-address deref) <- copy (2 tagged-value-array-address))
m: (2 tagged-value-array-address)
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
run: writing to oarg 1031 => (6 tagged-value-array-address-address deref)
setm: (6 tagged-value-array-address-address deref) <= 1031
sz: (6 tagged-value-array-address-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1042 tagged-value-array-address)
addr: (6 tagged-value-array-address-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1042
setm: size of (6 tagged-value-array-address-address deref) is 1
setm: (6 tagged-value-array-address-address deref): setting 1042 to 1031
run: -- ((1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 12 new-channel 10: (reply (3 channel-address))
m: (3 channel-address)
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
reply: ((3 channel-address)) ((1 channel-address))
reply: 1038 => (1 channel-address)
setm: (1 channel-address) <= 1038
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1038
run: -- ((1 1038) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 13 main 1: ((2 integer) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel-address deref) (2 offset) => 1040 integer
m: (1040 integer global)
sz: (1040 integer global)
addr: (1040 integer global)
addr: initial result: 1040
run: writing to oarg 0 => (2 integer)
setm: (2 integer) <= 0
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 0
run: -- ((1 1038) (2 0) (1000 30) (1001 3) (1002 1031) (1003 1038) (1004 1040) (1005 1041) (1006 1042) (1031 3) (1040 0) (1041 0) (1042 1031))
run: 14 main 2: ((3 integer) <- get (1 channel-address deref) (3 offset))
record-info: (1 channel-address deref) (3 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1038
record-info: initial base 1038 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel-address deref) (3 offset) => 1041 integer
m: (1041 integer global)
sz: (1041 integer global)
addr: (1041 integer global)
addr: initial result: 1041
run: writing to oarg 0 => (3 integer)
setm: (3 integer) <= 0
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
setm: size of (3 integer) is 1
setm: (3 integer): setting 3 to 0
