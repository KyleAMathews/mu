cvt0: 0 ((1 integer-address) <- copy (34 literal)) -- nil
cvt0: 1 ((2 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address)) -- nil
cvt0: 2 ((3 integer-address) (4 boolean) <- maybe-coerce (2 tagged-value-address deref) (integer-address literal)) -- nil
cvt1: 0 copy ((1 integer-address))
cvt1: 1 new-tagged-value ((2 tagged-value-address))
cvt1: 2 maybe-coerce ((3 integer-address) (4 boolean))
schedule: main
run: -- nil
run: main 0: ((1 integer-address) <- copy (34 literal))
run: writing to oarg 34 => (1 integer-address)
setm: (1 integer-address) <= 34
sz: (1 integer-address)
setm: size of (1 integer-address) is 1
run: -- ((1 34))
run: main 1: ((2 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address))
sz: (1 integer-address)
m: (1 integer-address) 1
sz: (1 integer-address)
run: -- ((1 34))
run: new-tagged-value 0: ((201 type) <- arg)
arg: nil 0 (integer-address 34)
setm: (201 type) <= integer-address
sz: (201 type)
setm: size of (201 type) is 1
run: -- ((1 34) (201 integer-address))
run: new-tagged-value 1: ((202 integer) <- sizeof (201 type))
sz: (201 type)
m: (201 type) 1
sz: (201 type)
sizeof: integer-address
run: writing to oarg 1 => (202 integer)
setm: (202 integer) <= 1
sz: (202 integer)
setm: size of (202 integer) is 1
run: -- ((1 34) (201 integer-address) (202 1))
run: new-tagged-value 2: ((203 boolean) <- eq (202 integer) (1 literal))
sz: (202 integer)
m: (202 integer) 1
sz: (202 integer)
run: writing to oarg t => (203 boolean)
setm: (203 boolean) <= t
sz: (203 boolean)
setm: size of (203 boolean) is 1
run: -- ((1 34) (201 integer-address) (202 1) (203 t))
run: new-tagged-value 3: (assert (203 boolean))
sz: (203 boolean)
m: (203 boolean) 1
sz: (203 boolean)
run: -- ((1 34) (201 integer-address) (202 1) (203 t))
run: new-tagged-value 4: ((204 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1000 => (204 tagged-value-address)
setm: (204 tagged-value-address) <= 1000
sz: (204 tagged-value-address)
setm: size of (204 tagged-value-address) is 1
run: -- ((1 34) (201 integer-address) (202 1) (203 t) (204 1000))
run: new-tagged-value 5: ((205 location) <- get-address (204 tagged-value-address deref) (0 offset))
get-address: (204 tagged-value-address deref).0
get-address: after: (1000 tagged-value)
run: writing to oarg 1000 => (205 location)
setm: (205 location) <= 1000
sz: (205 location)
setm: size of (205 location) is 1
run: -- ((1 34) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000))
run: new-tagged-value 6: ((205 location deref) <- copy (201 type))
sz: (201 type)
m: (201 type) 1
sz: (201 type)
run: writing to oarg integer-address => (205 location deref)
setm: (205 location deref) <= integer-address
sz: (205 location deref)
sz: (205 location)
m: (205 location) 1
sz: (205 location)
sz: (1000 location)
setm: size of (205 location deref) is 1
run: -- ((1 34) (1000 integer-address) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000))
run: new-tagged-value 7: ((206 location) <- get-address (204 tagged-value-address deref) (1 offset))
get-address: (204 tagged-value-address deref).1
get-address: after: (1000 tagged-value)
run: writing to oarg 1001 => (206 location)
setm: (206 location) <= 1001
sz: (206 location)
setm: size of (206 location) is 1
run: -- ((1 34) (1000 integer-address) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: new-tagged-value 8: ((206 location deref) <- arg)
arg: nil 1 (integer-address 34)
setm: (206 location deref) <= 34
sz: (206 location deref)
sz: (206 location)
m: (206 location) 1
sz: (206 location)
sz: (1001 location)
setm: size of (206 location deref) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: new-tagged-value 9: (reply (204 tagged-value-address))
sz: (204 tagged-value-address)
m: (204 tagged-value-address) 1
sz: (204 tagged-value-address)
reply: ((204 tagged-value-address)) ((2 tagged-value-address))
reply: 1000 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1000
sz: (2 tagged-value-address)
setm: size of (2 tagged-value-address) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: main 2: ((3 integer-address) (4 boolean) <- maybe-coerce (2 tagged-value-address deref) (integer-address literal))
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1000 tagged-value)
m: (2 tagged-value-address deref) 2
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1000 tagged-value)
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1000 tagged-value)
run: -- ((1 34) (1000 integer-address) (1001 34) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 0: ((101 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1002 => (101 tagged-value-address)
setm: (101 tagged-value-address) <= 1002
sz: (101 tagged-value-address)
setm: size of (101 tagged-value-address) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (101 1002) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 1: ((101 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer-address 34 . nil)) integer-address)
setm: (101 tagged-value-address deref) <= #(tagged record (integer-address 34 . nil))
sz: (101 tagged-value-address deref)
sz: (101 location)
m: (101 location) 1
sz: (101 location)
sz: (1002 tagged-value)
setm: size of (101 tagged-value-address deref) is 2
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (101 1002) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 2: ((102 type) <- arg)
arg: nil 1 (#(tagged record (integer-address 34 . nil)) integer-address)
setm: (102 type) <= integer-address
sz: (102 type)
setm: size of (102 type) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (101 1002) (102 integer-address) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 3: ((103 type) <- get (101 tagged-value-address deref) (0 offset))
sz: (1002 type)
m: (1002 type) 1
sz: (1002 type)
run: writing to oarg integer-address => (103 type)
setm: (103 type) <= integer-address
sz: (103 type)
setm: size of (103 type) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (101 1002) (102 integer-address) (103 integer-address) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 4: ((104 boolean) <- eq (103 type) (102 type))
sz: (103 type)
m: (103 type) 1
sz: (103 type)
sz: (102 type)
m: (102 type) 1
sz: (102 type)
run: writing to oarg t => (104 boolean)
setm: (104 boolean) <= t
sz: (104 boolean)
setm: size of (104 boolean) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (101 1002) (102 integer-address) (103 integer-address) (104 t) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 5: (jump-if (104 boolean) (1 offset))
sz: (104 boolean)
m: (104 boolean) 1
sz: (104 boolean)
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (101 1002) (102 integer-address) (103 integer-address) (104 t) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 7: ((105 location) <- get (101 tagged-value-address deref) (1 offset))
sz: (1003 location)
m: (1003 location) 1
sz: (1003 location)
run: writing to oarg 34 => (105 location)
setm: (105 location) <= 34
sz: (105 location)
setm: size of (105 location) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (101 1002) (102 integer-address) (103 integer-address) (104 t) (105 34) (2 1000) (201 integer-address) (202 1) (203 t) (204 1000) (205 1000) (206 1001))
run: maybe-coerce 8: (reply (105 location) (104 boolean))
sz: (105 location)
m: (105 location) 1
sz: (105 location)
sz: (104 boolean)
m: (104 boolean) 1
sz: (104 boolean)
reply: ((105 location) (104 boolean)) ((3 integer-address) (4 boolean))
reply: 34 => (3 integer-address)
setm: (3 integer-address) <= 34
sz: (3 integer-address)
setm: size of (3 integer-address) is 1
reply: t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
setm: size of (4 boolean) is 1
