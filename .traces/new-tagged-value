cvt0: 0 ((1 integer-address) <- copy (34 literal)) -- nil
cvt0: 1 ((2 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address)) -- nil
cvt0: 2 ((3 integer-address) (4 boolean) <- maybe-coerce (2 tagged-value-address deref) (integer-address literal)) -- nil
cvt1: 0 copy ((1 integer-address))
cvt1: 1 new-tagged-value ((2 tagged-value-address))
cvt1: 2 maybe-coerce ((3 integer-address) (4 boolean))
schedule: test1
run: -- nil
run: test1 0: ((1 integer-address) <- copy (34 literal))
sz: (34 literal)
m: (34 literal) literal
run: writing to oarg 34 => (1 integer-address)
setm: (1 integer-address) <= 34
sz: (1 integer-address)
setm: size of (1 integer-address) is 1
run: -- ((1 34))
run: test1 1: ((2 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address))
run: -- ((1 34))
run: new-tagged-value 0: ((xtype type) <- arg)
arg: nil 0 ((integer-address literal) (1 integer-address))
sz: (integer-address literal)
m: (integer-address literal) literal
setm: (xtype type) <= integer-address
sz: (xtype type)
setm: size of (xtype type) is 1
run: -- ((1 34) (xtype integer-address))
run: new-tagged-value 1: ((xtypesize integer) <- sizeof (xtype type))
sz: (xtype type)
m: (xtype type) 1
sz: (xtype type)
sizeof: integer-address
run: writing to oarg 1 => (xtypesize integer)
setm: (xtypesize integer) <= 1
sz: (xtypesize integer)
setm: size of (xtypesize integer) is 1
run: -- ((1 34) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 2: ((xcheck boolean) <- eq (xtypesize integer) (1 literal))
sz: (xtypesize integer)
m: (xtypesize integer) 1
sz: (xtypesize integer)
sz: (1 literal)
m: (1 literal) literal
run: writing to oarg t => (xcheck boolean)
setm: (xcheck boolean) <= t
sz: (xcheck boolean)
setm: size of (xcheck boolean) is 1
run: -- ((1 34) (xcheck t) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 3: (assert (xcheck boolean))
sz: (xcheck boolean)
m: (xcheck boolean) 1
sz: (xcheck boolean)
run: -- ((1 34) (xcheck t) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 4: ((result tagged-value-address) <- new (tagged-value type))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1000 => (result tagged-value-address)
setm: (result tagged-value-address) <= 1000
sz: (result tagged-value-address)
setm: size of (result tagged-value-address) is 1
run: -- ((1 34) (result 1000) (xcheck t) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 5: ((resulttype location) <- get-address (result tagged-value-address deref) (0 offset))
get-address: (result tagged-value-address deref).0
get-address: after: (1000 tagged-value)
run: writing to oarg 1000 => (resulttype location)
setm: (resulttype location) <= 1000
sz: (resulttype location)
setm: size of (resulttype location) is 1
run: -- ((1 34) (result 1000) (resulttype 1000) (xcheck t) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 6: ((resulttype location deref) <- copy (xtype type))
sz: (xtype type)
m: (xtype type) 1
sz: (xtype type)
run: writing to oarg integer-address => (resulttype location deref)
setm: (resulttype location deref) <= integer-address
sz: (resulttype location deref)
sz: (resulttype location)
m: (resulttype location) 1
sz: (resulttype location)
sz: (1000 location)
setm: size of (resulttype location deref) is 1
run: -- ((1 34) (1000 integer-address) (result 1000) (resulttype 1000) (xcheck t) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 7: ((locaddr location) <- get-address (result tagged-value-address deref) (1 offset))
get-address: (result tagged-value-address deref).1
get-address: after: (1000 tagged-value)
run: writing to oarg 1001 => (locaddr location)
setm: (locaddr location) <= 1001
sz: (locaddr location)
setm: size of (locaddr location) is 1
run: -- ((1 34) (1000 integer-address) (locaddr 1001) (result 1000) (resulttype 1000) (xcheck t) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 8: ((locaddr location deref) <- arg)
arg: nil 1 ((integer-address literal) (1 integer-address))
sz: (1 integer-address)
m: (1 integer-address) 1
sz: (1 integer-address)
setm: (locaddr location deref) <= 34
sz: (locaddr location deref)
sz: (locaddr location)
m: (locaddr location) 1
sz: (locaddr location)
sz: (1001 location)
setm: size of (locaddr location deref) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (locaddr 1001) (result 1000) (resulttype 1000) (xcheck t) (xtype integer-address) (xtypesize 1))
run: new-tagged-value 9: (reply (result tagged-value-address))
reply: ((result tagged-value-address)) ((2 tagged-value-address))
reply: (result tagged-value-address) => (2 tagged-value-address)
sz: (result tagged-value-address)
m: (result tagged-value-address) 1
sz: (result tagged-value-address)
setm: (2 tagged-value-address) <= 1000
sz: (2 tagged-value-address)
setm: size of (2 tagged-value-address) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (2 1000) (locaddr 1001) (result 1000) (resulttype 1000) (xcheck t) (xtype integer-address) (xtypesize 1))
run: test1 2: ((3 integer-address) (4 boolean) <- maybe-coerce (2 tagged-value-address deref) (integer-address literal))
run: -- ((1 34) (1000 integer-address) (1001 34) (2 1000) (locaddr 1001) (result 1000) (resulttype 1000) (xcheck t) (xtype integer-address) (xtypesize 1))
run: maybe-coerce 0: ((x tagged-value-address) <- new (tagged-value type))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1002 => (x tagged-value-address)
setm: (x tagged-value-address) <= 1002
sz: (x tagged-value-address)
setm: size of (x tagged-value-address) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (2 1000) (locaddr 1001) (result 1000) (resulttype 1000) (x 1002) (xcheck t) (xtype integer-address) (xtypesize 1))
run: maybe-coerce 1: ((x tagged-value-address deref) <- arg)
arg: nil 0 ((2 tagged-value-address deref) (integer-address literal))
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1000 tagged-value)
m: (2 tagged-value-address deref) 2
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1000 tagged-value)
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1000 tagged-value)
setm: (x tagged-value-address deref) <= #(tagged record (integer-address 34 . nil))
sz: (x tagged-value-address deref)
sz: (x location)
m: (x location) 1
sz: (x location)
sz: (1002 tagged-value)
setm: size of (x tagged-value-address deref) is 2
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (2 1000) (locaddr 1001) (result 1000) (resulttype 1000) (x 1002) (xcheck t) (xtype integer-address) (xtypesize 1))
run: maybe-coerce 2: ((p type) <- arg)
arg: nil 1 ((2 tagged-value-address deref) (integer-address literal))
sz: (integer-address literal)
m: (integer-address literal) literal
setm: (p type) <= integer-address
sz: (p type)
setm: size of (p type) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (2 1000) (locaddr 1001) (p integer-address) (result 1000) (resulttype 1000) (x 1002) (xcheck t) (xtype integer-address) (xtypesize 1))
run: maybe-coerce 3: ((xtype type) <- get (x tagged-value-address deref) (0 offset))
sz: (1002 type)
m: (1002 type) 1
sz: (1002 type)
run: writing to oarg integer-address => (xtype type)
setm: (xtype type) <= integer-address
sz: (xtype type)
setm: size of (xtype type) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (2 1000) (locaddr 1001) (p integer-address) (result 1000) (resulttype 1000) (x 1002) (xcheck t) (xtype integer-address) (xtypesize 1))
run: maybe-coerce 4: ((match? boolean) <- eq (xtype type) (p type))
sz: (xtype type)
m: (xtype type) 1
sz: (xtype type)
sz: (p type)
m: (p type) 1
sz: (p type)
run: writing to oarg t => (match? boolean)
setm: (match? boolean) <= t
sz: (match? boolean)
setm: size of (match? boolean) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (2 1000) (locaddr 1001) (match? t) (p integer-address) (result 1000) (resulttype 1000) (x 1002) (xcheck t) (xtype integer-address) (xtypesize 1))
run: maybe-coerce 5: (jif (match? boolean) (1 offset))
sz: (match? boolean)
m: (match? boolean) 1
sz: (match? boolean)
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (2 1000) (locaddr 1001) (match? t) (p integer-address) (result 1000) (resulttype 1000) (x 1002) (xcheck t) (xtype integer-address) (xtypesize 1))
run: maybe-coerce 7: ((xvalue location) <- get (x tagged-value-address deref) (1 offset))
sz: (1003 location)
m: (1003 location) 1
sz: (1003 location)
run: writing to oarg 34 => (xvalue location)
setm: (xvalue location) <= 34
sz: (xvalue location)
setm: size of (xvalue location) is 1
run: -- ((1 34) (1000 integer-address) (1001 34) (1002 integer-address) (1003 34) (2 1000) (locaddr 1001) (match? t) (p integer-address) (result 1000) (resulttype 1000) (x 1002) (xcheck t) (xtype integer-address) (xtypesize 1) (xvalue 34))
run: maybe-coerce 8: (reply (xvalue location) (match? boolean))
reply: ((xvalue location) (match? boolean)) ((3 integer-address) (4 boolean))
reply: (xvalue location) => (3 integer-address)
sz: (xvalue location)
m: (xvalue location) 1
sz: (xvalue location)
setm: (3 integer-address) <= 34
sz: (3 integer-address)
setm: size of (3 integer-address) is 1
reply: (match? boolean) => (4 boolean)
sz: (match? boolean)
m: (match? boolean) 1
sz: (match? boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
setm: size of (4 boolean) is 1
