cvt0: 0 ((1 integer-address) <- copy (34 literal)) -- nil
cvt0: 1 ((2 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address)) -- nil
cvt0: 2 ((3 integer-address) (4 boolean) <- maybe-coerce (2 tagged-value-address deref) (integer-address literal)) -- nil
cvt1: 0 copy ((1 integer-address))
cvt1: 1 new-tagged-value ((2 tagged-value-address))
cvt1: 2 maybe-coerce ((3 integer-address) (4 boolean))
schedule: main
run: -- nil
run: main 0: ((1 integer-address) <- copy (34 literal))
run: writing to oarg 34 => (1 integer-address)
setm: (1 integer-address) <= 34
sz: (1 integer-address)
setm: size of (1 integer-address) is 1
run: -- ((1 34))
run: main 1: ((2 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address))
sz: (1 integer-address)
m: (1 integer-address) 1
sz: (1 integer-address)
run: -- ((1 34))
run: new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 34) (1000 30))
run: new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 34)
setm: (1 type) <= integer-address
sz: (1 type)
setm: size of (1 type) is 1
run: -- ((1 34) (1000 30) (1001 integer-address))
run: new-tagged-value 2: ((2 integer) <- sizeof (1 type))
sz: (1 type)
m: (1 type) 1
sz: (1 type)
sizeof: integer-address
run: writing to oarg 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
setm: size of (2 integer) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1))
run: new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
sz: (2 integer)
m: (2 integer) 1
sz: (2 integer)
run: writing to oarg t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
setm: size of (3 boolean) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t))
run: new-tagged-value 4: (assert (3 boolean))
sz: (3 boolean)
m: (3 boolean) 1
sz: (3 boolean)
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t))
run: new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1031
sz: (4 tagged-value-address)
setm: size of (4 tagged-value-address) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031))
run: new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
run: writing to oarg 1031 => (5 location)
setm: (5 location) <= 1031
sz: (5 location)
setm: size of (5 location) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031))
run: new-tagged-value 7: ((5 location deref) <- copy (1 type))
sz: (1 type)
m: (1 type) 1
sz: (1 type)
run: writing to oarg integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sz: (5 location deref)
sz: (5 location)
m: (5 location) 1
sz: (5 location)
sz: (1031 location)
setm: size of (5 location deref) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1031 integer-address))
run: new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
run: writing to oarg 1032 => (6 location)
setm: (6 location) <= 1032
sz: (6 location)
setm: size of (6 location) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address))
run: new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 34)
setm: (6 location deref) <= 34
sz: (6 location deref)
sz: (6 location)
m: (6 location) 1
sz: (6 location)
sz: (1032 location)
setm: size of (6 location deref) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34))
run: new-tagged-value 10: (reply (4 tagged-value-address))
sz: (4 tagged-value-address)
m: (4 tagged-value-address) 1
sz: (4 tagged-value-address)
reply: ((4 tagged-value-address)) ((2 tagged-value-address))
reply: 1031 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1031
sz: (2 tagged-value-address)
setm: size of (2 tagged-value-address) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (2 1031))
run: main 2: ((3 integer-address) (4 boolean) <- maybe-coerce (2 tagged-value-address deref) (integer-address literal))
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1031 tagged-value)
m: (2 tagged-value-address deref) 2
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1031 tagged-value)
sz: (2 tagged-value-address deref)
sz: (2 location)
m: (2 location) 1
sz: (2 location)
sz: (1031 tagged-value)
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (2 1031))
run: maybe-coerce 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1033 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (2 1031))
run: maybe-coerce 1: ((1 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1064 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1064
sz: (1 tagged-value-address)
setm: size of (1 tagged-value-address) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (2 1031))
run: maybe-coerce 2: ((1 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer-address 34 . nil)) integer-address)
setm: (1 tagged-value-address deref) <= #(tagged record (integer-address 34 . nil))
sz: (1 tagged-value-address deref)
sz: (1 location)
m: (1 location) 1
sz: (1 location)
sz: (1064 tagged-value)
setm: size of (1 tagged-value-address deref) is 2
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1064 integer-address) (1065 34) (2 1031))
run: maybe-coerce 3: ((2 type) <- arg)
arg: nil 1 (#(tagged record (integer-address 34 . nil)) integer-address)
setm: (2 type) <= integer-address
sz: (2 type)
setm: size of (2 type) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1064 integer-address) (1065 34) (2 1031))
run: maybe-coerce 4: ((3 type) <- get (1 tagged-value-address deref) (0 offset))
sz: (1064 type global)
m: (1064 type global) 1
sz: (1064 type global)
run: writing to oarg integer-address => (3 type)
setm: (3 type) <= integer-address
sz: (3 type)
setm: size of (3 type) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1064 integer-address) (1065 34) (2 1031))
run: maybe-coerce 5: ((4 boolean) <- eq (3 type) (2 type))
sz: (3 type)
m: (3 type) 1
sz: (3 type)
sz: (2 type)
m: (2 type) 1
sz: (2 type)
run: writing to oarg t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
setm: size of (4 boolean) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1037 t) (1064 integer-address) (1065 34) (2 1031))
run: maybe-coerce 6: (jump-if (4 boolean) (1 offset))
sz: (4 boolean)
m: (4 boolean) 1
sz: (4 boolean)
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1037 t) (1064 integer-address) (1065 34) (2 1031))
run: maybe-coerce 8: ((5 location) <- get (1 tagged-value-address deref) (1 offset))
sz: (1065 location global)
m: (1065 location global) 1
sz: (1065 location global)
run: writing to oarg 34 => (5 location)
setm: (5 location) <= 34
sz: (5 location)
setm: size of (5 location) is 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1037 t) (1038 34) (1064 integer-address) (1065 34) (2 1031))
run: maybe-coerce 9: (reply (5 location) (4 boolean))
sz: (5 location)
m: (5 location) 1
sz: (5 location)
sz: (4 boolean)
m: (4 boolean) 1
sz: (4 boolean)
reply: ((5 location) (4 boolean)) ((3 integer-address) (4 boolean))
reply: 34 => (3 integer-address)
setm: (3 integer-address) <= 34
sz: (3 integer-address)
setm: size of (3 integer-address) is 1
reply: t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
setm: size of (4 boolean) is 1
