c{0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
c{0: 1 ((2 boolean) <- empty? (1 channel-address deref)) -- nil
c{0: 2 ((3 boolean) <- full? (1 channel-address deref)) -- nil
c{1: 0 new-channel ((1 channel-address))
c{1: 1 empty? ((2 boolean))
c{1: 2 full? ((3 boolean))
cn0: ((1 channel-address) <- new-channel (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: ((3 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 channel-address) <- new (channel literal))
sizeof: channel
sizeof: boolean
sizeof: boolean
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1001 to 1031
run: -- ((1000 30) (1001 1031))
run: 4 new-channel 2: ((2 integer-address) <- get-address (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (2 offset) => 1033
run: writing to oarg 1033 => (2 integer-address)
setm: (2 integer-address) <= 1033
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 1002 to 1033
run: -- ((1000 30) (1001 1031) (1002 1033))
run: 5 new-channel 3: ((2 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (2 integer-address deref)
setm: (2 integer-address deref) <= 0
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1000
sz: (1033 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: incrementing by 1000
addr: deref 1002 => 1033
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1033 to 0
run: -- ((1000 30) (1001 1031) (1002 1033) (1033 0))
run: 6 new-channel 4: ((3 integer-address) <- get-address (1 channel-address deref) (3 offset))
record-info: (1 channel-address deref) (3 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (3 offset) => 1034
run: writing to oarg 1034 => (3 integer-address)
setm: (3 integer-address) <= 1034
sz: (3 integer-address)
addr: (3 integer-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 1003 to 1034
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1033 0))
run: 7 new-channel 5: ((3 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (3 integer-address deref)
setm: (3 integer-address deref) <= 0
sz: (3 integer-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1000
sz: (1034 integer)
addr: (3 integer-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1034
setm: size of (3 integer-address deref) is 1
setm: (3 integer-address deref): setting 1034 to 0
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1033 0) (1034 0))
run: 8 new-channel 6: ((4 integer) <- arg)
arg: nil 0 (3)
setm: (4 integer) <= 3
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 3
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 3) (1033 0) (1034 0))
run: 9 new-channel 7: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
add: 3 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
run: writing to oarg 4 => (4 integer)
setm: (4 integer) <= 4
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 4
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1033 0) (1034 0))
run: 10 new-channel 8: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (4 offset))
record-info: (1 channel-address deref) (4 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (4 offset) => 1035
run: writing to oarg 1035 => (5 tagged-value-array-address-address)
setm: (5 tagged-value-array-address-address) <= 1035
sz: (5 tagged-value-array-address-address)
addr: (5 tagged-value-array-address-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 tagged-value-array-address-address) is 1
setm: (5 tagged-value-array-address-address): setting 1005 to 1035
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0))
run: 11 new-channel 9: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1036 => (5 tagged-value-array-address-address deref)
setm: (5 tagged-value-array-address-address deref) <= 1036
sz: (5 tagged-value-array-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1035 tagged-value-array-address)
addr: (5 tagged-value-array-address-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1035
setm: size of (5 tagged-value-array-address-address deref) is 1
setm: (5 tagged-value-array-address-address deref): setting 1035 to 1036
run: -- ((1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4))
run: 12 new-channel 10: (reply (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
reply: ((1 channel-address)) ((1 channel-address))
reply: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1031
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4))
run: 13 main 1: ((2 boolean) <- empty? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4))
run: 14 empty? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1045 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30))
run: 15 empty? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1036 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1036 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1045
setm: size of (1 channel) is 5
setm: (1 channel): setting 1046 to nil
setm: (1 channel): setting 1047 to nil
setm: (1 channel): setting 1048 to 0
setm: (1 channel): setting 1049 to 0
setm: (1 channel): setting 1050 to 1036
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036))
run: 16 empty? 2: ((6 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1045
record-info: initial base 1046 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1048 integer
m: (1048 integer global)
sz: (1048 integer global)
addr: (1048 integer global)
addr: initial result: 1048
run: writing to oarg 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1045
setm: size of (6 integer) is 1
setm: (6 integer): setting 1051 to 0
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0))
run: 17 empty? 3: ((7 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1045
record-info: initial base 1046 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1049 integer
m: (1049 integer global)
sz: (1049 integer global)
addr: (1049 integer global)
addr: initial result: 1049
run: writing to oarg 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1045
setm: size of (7 integer) is 1
setm: (7 integer): setting 1052 to 0
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0))
run: 18 empty? 4: ((8 boolean) <- eq (6 integer) (7 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1045
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1045
run: writing to oarg t => (8 boolean)
setm: (8 boolean) <= t
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1045
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1053 to t
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t))
run: 19 empty? 5: (reply (8 boolean))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1045
reply: ((8 boolean)) ((2 boolean))
reply: t => (2 boolean)
setm: (2 boolean) <= t
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
setm: size of (2 boolean) is 1
setm: (2 boolean): setting 2 to t
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t))
run: 20 main 2: ((3 boolean) <- full? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t))
run: 21 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1076 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30))
run: 22 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1036 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1036 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
setm: size of (1 channel) is 5
setm: (1 channel): setting 1077 to nil
setm: (1 channel): setting 1078 to nil
setm: (1 channel): setting 1079 to 0
setm: (1 channel): setting 1080 to 0
setm: (1 channel): setting 1081 to 1036
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036))
run: 23 full? 2: ((6 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
record-info: initial base 1077 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1080 integer
m: (1080 integer global)
sz: (1080 integer global)
addr: (1080 integer global)
addr: initial result: 1080
run: writing to oarg 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
setm: size of (6 integer) is 1
setm: (6 integer): setting 1082 to 0
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 0))
run: 24 full? 3: ((7 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
record-info: initial base 1077 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1081 tagged-value-array-address
m: (1081 tagged-value-array-address global)
sz: (1081 tagged-value-array-address global)
addr: (1081 tagged-value-array-address global)
addr: initial result: 1081
run: writing to oarg 1036 => (7 tagged-value-array-address)
setm: (7 tagged-value-array-address) <= 1036
sz: (7 tagged-value-array-address)
addr: (7 tagged-value-array-address)
addr: initial result: 7
addr: incrementing by 1076
setm: size of (7 tagged-value-array-address) is 1
setm: (7 tagged-value-array-address): setting 1083 to 1036
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 0) (1083 1036))
run: 25 full? 4: ((8 integer) <- len (7 tagged-value-array-address deref))
array-len: (7 tagged-value-array-address deref)
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1076
sz: (1036 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1076
addr: deref 1083 => 1036
run: writing to oarg 4 => (8 integer)
setm: (8 integer) <= 4
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1076
setm: size of (8 integer) is 1
setm: (8 integer): setting 1084 to 4
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 0) (1083 1036) (1084 4))
run: 26 full? 5: ((6 integer) <- add (6 integer) (1 literal))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
add: 0 1
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
run: writing to oarg 1 => (6 integer)
setm: (6 integer) <= 1
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
setm: size of (6 integer) is 1
setm: (6 integer): setting 1082 to 1
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 1) (1083 1036) (1084 4))
run: 27 full? 6: ((9 boolean) <- lt (6 integer) (8 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
m: (8 integer)
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1076
run: writing to oarg t => (9 boolean)
setm: (9 boolean) <= t
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1076
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1085 to t
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 1) (1083 1036) (1084 4) (1085 t))
run: 28 full? 7: (jump-if (9 boolean) (1 offset))
m: (9 boolean)
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1076
jump: checking that t is t
jump: jumping to 9
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 1) (1083 1036) (1084 4) (1085 t))
run: 29 full? 9: ((10 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
record-info: initial base 1077 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1079 integer
m: (1079 integer global)
sz: (1079 integer global)
addr: (1079 integer global)
addr: initial result: 1079
run: writing to oarg 0 => (10 integer)
setm: (10 integer) <= 0
sz: (10 integer)
addr: (10 integer)
addr: initial result: 10
addr: incrementing by 1076
setm: size of (10 integer) is 1
setm: (10 integer): setting 1086 to 0
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 1) (1083 1036) (1084 4) (1085 t) (1086 0))
run: 30 full? 10: ((11 boolean) <- eq (10 integer) (6 integer))
m: (10 integer)
sz: (10 integer)
addr: (10 integer)
addr: initial result: 10
addr: incrementing by 1076
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
run: writing to oarg nil => (11 boolean)
setm: (11 boolean) <= nil
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1076
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1087 to nil
run: -- ((1 1031) (2 t) (1000 30) (1001 1031) (1002 1033) (1003 1034) (1004 4) (1005 1035) (1033 0) (1034 0) (1035 1036) (1036 4) (1045 30) (1048 0) (1049 0) (1050 1036) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1036) (1082 1) (1083 1036) (1084 4) (1085 t) (1086 0))
run: 31 full? 11: (reply (11 boolean))
m: (11 boolean)
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1076
reply: ((11 boolean)) ((3 boolean))
reply: nil => (3 boolean)
setm: (3 boolean) <= nil
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 3 to nil
