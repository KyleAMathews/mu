c{0: 0 ((1 channel-address) <- new-channel (3 literal)) -- nil
c{0: 1 ((2 boolean) <- empty? (1 channel-address deref)) -- nil
c{0: 2 ((3 boolean) <- full? (1 channel-address deref)) -- nil
c{1: 0 new-channel ((1 channel-address))
c{1: 1 empty? ((2 boolean))
c{1: 2 full? ((3 boolean))
cn0: ((1 channel-address) <- new-channel (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: ((3 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 integer) <- arg)
arg: nil 0 (3)
setm: (1 integer) <= 3
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 3
run: -- ((1000 30) (1001 3))
run: 4 new-channel 2: ((1 integer) <- add (1 integer) (1 literal))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
add: 3 1
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
run: writing to oarg 4 => (1 integer)
setm: (1 integer) <= 4
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer) is 1
setm: (1 integer): setting 1001 to 4
run: -- ((1000 30) (1001 4))
run: 5 new-channel 3: ((2 tagged-value-array-address) <- new (tagged-value-array literal) (1 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: writing to oarg 1031 => (2 tagged-value-array-address)
setm: (2 tagged-value-array-address) <= 1031
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 tagged-value-array-address) is 1
setm: (2 tagged-value-array-address): setting 1002 to 1031
run: -- ((1000 30) (1001 4) (1002 1031) (1031 4))
run: 6 new-channel 4: ((3 channel-address) <- new (channel literal))
sizeof: channel
sizeof: boolean
sizeof: boolean
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: writing to oarg 1040 => (3 channel-address)
setm: (3 channel-address) <= 1040
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 channel-address) is 1
setm: (3 channel-address): setting 1003 to 1040
run: -- ((1000 30) (1001 4) (1002 1031) (1003 1040) (1031 4))
run: 7 new-channel 5: ((4 integer-address) <- get-address (3 channel-address deref) (2 offset))
record-info: (3 channel-address deref) (2 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1040
record-info: initial base 1040 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (2 offset) => 1042
run: writing to oarg 1042 => (4 integer-address)
setm: (4 integer-address) <= 1042
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1004 to 1042
run: -- ((1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1031 4))
run: 8 new-channel 6: ((4 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (4 integer-address deref)
setm: (4 integer-address deref) <= 0
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1000
sz: (1042 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1042
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1042 to 0
run: -- ((1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1031 4) (1042 0))
run: 9 new-channel 7: ((5 integer-address) <- get-address (3 channel-address deref) (3 offset))
record-info: (3 channel-address deref) (3 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1040
record-info: initial base 1040 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (3 offset) => 1043
run: writing to oarg 1043 => (5 integer-address)
setm: (5 integer-address) <= 1043
sz: (5 integer-address)
addr: (5 integer-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 integer-address) is 1
setm: (5 integer-address): setting 1005 to 1043
run: -- ((1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1031 4) (1042 0))
run: 10 new-channel 8: ((5 integer-address deref) <- copy (0 literal))
run: writing to oarg 0 => (5 integer-address deref)
setm: (5 integer-address deref) <= 0
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1043 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1043
setm: size of (5 integer-address deref) is 1
setm: (5 integer-address deref): setting 1043 to 0
run: -- ((1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1031 4) (1042 0) (1043 0))
run: 11 new-channel 9: ((6 tagged-value-array-address-address) <- get-address (3 channel-address deref) (4 offset))
record-info: (3 channel-address deref) (4 offset)
addr: (3 channel-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1040
record-info: initial base 1040 type ((address t) (elem channel) (size 1))
record-info: (3 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (3 channel-address deref) (4 offset) => 1044
run: writing to oarg 1044 => (6 tagged-value-array-address-address)
setm: (6 tagged-value-array-address-address) <= 1044
sz: (6 tagged-value-array-address-address)
addr: (6 tagged-value-array-address-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-array-address-address) is 1
setm: (6 tagged-value-array-address-address): setting 1006 to 1044
run: -- ((1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0))
run: 12 new-channel 10: ((6 tagged-value-array-address-address deref) <- copy (2 tagged-value-array-address))
m: (2 tagged-value-array-address)
sz: (2 tagged-value-array-address)
addr: (2 tagged-value-array-address)
addr: initial result: 2
addr: incrementing by 1000
run: writing to oarg 1031 => (6 tagged-value-array-address-address deref)
setm: (6 tagged-value-array-address-address deref) <= 1031
sz: (6 tagged-value-array-address-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1044 tagged-value-array-address)
addr: (6 tagged-value-array-address-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1044
setm: size of (6 tagged-value-array-address-address deref) is 1
setm: (6 tagged-value-array-address-address deref): setting 1044 to 1031
run: -- ((1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031))
run: 13 new-channel 11: (reply (3 channel-address))
m: (3 channel-address)
sz: (3 channel-address)
addr: (3 channel-address)
addr: initial result: 3
addr: incrementing by 1000
reply: ((3 channel-address)) ((1 channel-address))
reply: 1040 => (1 channel-address)
setm: (1 channel-address) <= 1040
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1040
run: -- ((1 1040) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031))
run: 14 main 1: ((2 boolean) <- empty? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1040 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1040
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1040 channel)
run: -- ((1 1040) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031))
run: 15 empty? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1045 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1040) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30))
run: 16 empty? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1031 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1045
setm: size of (1 channel) is 5
setm: (1 channel): setting 1046 to nil
setm: (1 channel): setting 1047 to nil
setm: (1 channel): setting 1048 to 0
setm: (1 channel): setting 1049 to 0
setm: (1 channel): setting 1050 to 1031
run: -- ((1 1040) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031))
run: 17 empty? 2: ((6 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1045
record-info: initial base 1046 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1048 integer
m: (1048 integer global)
sz: (1048 integer global)
addr: (1048 integer global)
addr: initial result: 1048
run: writing to oarg 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1045
setm: size of (6 integer) is 1
setm: (6 integer): setting 1051 to 0
run: -- ((1 1040) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0))
run: 18 empty? 3: ((7 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1045
record-info: initial base 1046 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1049 integer
m: (1049 integer global)
sz: (1049 integer global)
addr: (1049 integer global)
addr: initial result: 1049
run: writing to oarg 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1045
setm: size of (7 integer) is 1
setm: (7 integer): setting 1052 to 0
run: -- ((1 1040) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0))
run: 19 empty? 4: ((8 boolean) <- eq (6 integer) (7 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1045
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1045
run: writing to oarg t => (8 boolean)
setm: (8 boolean) <= t
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1045
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1053 to t
run: -- ((1 1040) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t))
run: 20 empty? 5: (reply (8 boolean))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1045
reply: ((8 boolean)) ((2 boolean))
reply: t => (2 boolean)
setm: (2 boolean) <= t
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
setm: size of (2 boolean) is 1
setm: (2 boolean): setting 2 to t
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t))
run: 21 main 2: ((3 boolean) <- full? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1040 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1040
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1040 channel)
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t))
run: 22 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: writing to oarg 1076 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30))
run: 23 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1031 . nil)))
setm: (1 channel) <= #(tagged record (nil nil 0 0 1031 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
setm: size of (1 channel) is 5
setm: (1 channel): setting 1077 to nil
setm: (1 channel): setting 1078 to nil
setm: (1 channel): setting 1079 to 0
setm: (1 channel): setting 1080 to 0
setm: (1 channel): setting 1081 to 1031
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031))
run: 24 full? 2: ((6 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
record-info: initial base 1077 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1079 integer
m: (1079 integer global)
sz: (1079 integer global)
addr: (1079 integer global)
addr: initial result: 1079
run: writing to oarg 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
setm: size of (6 integer) is 1
setm: (6 integer): setting 1082 to 0
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0))
run: 25 full? 3: ((7 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
record-info: initial base 1077 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1080 integer
m: (1080 integer global)
sz: (1080 integer global)
addr: (1080 integer global)
addr: initial result: 1080
run: writing to oarg 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1076
setm: size of (7 integer) is 1
setm: (7 integer): setting 1083 to 0
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0) (1083 0))
run: 26 full? 4: ((8 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
record-info: initial base 1077 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1081 tagged-value-array-address
m: (1081 tagged-value-array-address global)
sz: (1081 tagged-value-array-address global)
addr: (1081 tagged-value-array-address global)
addr: initial result: 1081
run: writing to oarg 1031 => (8 tagged-value-array-address)
setm: (8 tagged-value-array-address) <= 1031
sz: (8 tagged-value-array-address)
addr: (8 tagged-value-array-address)
addr: initial result: 8
addr: incrementing by 1076
setm: size of (8 tagged-value-array-address) is 1
setm: (8 tagged-value-array-address): setting 1084 to 1031
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0) (1083 0) (1084 1031))
run: 27 full? 5: ((9 integer) <- len (8 tagged-value-array-address deref))
array-len: (8 tagged-value-array-address deref)
m: (8 integer-address deref)
sz: (8 integer-address deref)
m: (8 location)
sz: (8 location)
addr: (8 location)
addr: initial result: 8
addr: incrementing by 1076
sz: (1031 integer)
addr: (8 integer-address deref)
addr: initial result: 8
addr: incrementing by 1076
addr: deref 1084 => 1031
run: writing to oarg 4 => (9 integer)
setm: (9 integer) <= 4
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1076
setm: size of (9 integer) is 1
setm: (9 integer): setting 1085 to 4
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0) (1083 0) (1084 1031) (1085 4))
run: 28 full? 6: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1076
add: 0 1
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1076
run: writing to oarg 1 => (7 integer)
setm: (7 integer) <= 1
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1076
setm: size of (7 integer) is 1
setm: (7 integer): setting 1083 to 1
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0) (1083 1) (1084 1031) (1085 4))
run: 29 full? 7: ((10 boolean) <- lt (7 integer) (9 integer))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1076
m: (9 integer)
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1076
run: writing to oarg t => (10 boolean)
setm: (10 boolean) <= t
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1076
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1086 to t
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0) (1083 1) (1084 1031) (1085 4) (1086 t))
run: 30 full? 8: (jump-if (10 boolean) (1 offset))
m: (10 boolean)
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1076
jump: checking that t is t
jump: jumping to 10
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0) (1083 1) (1084 1031) (1085 4) (1086 t))
run: 31 full? 10: ((11 boolean) <- eq (6 integer) (7 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1076
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1076
run: writing to oarg nil => (11 boolean)
setm: (11 boolean) <= nil
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1076
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1087 to nil
run: -- ((1 1040) (2 t) (1000 30) (1001 4) (1002 1031) (1003 1040) (1004 1042) (1005 1043) (1006 1044) (1031 4) (1042 0) (1043 0) (1044 1031) (1045 30) (1048 0) (1049 0) (1050 1031) (1051 0) (1052 0) (1053 t) (1076 30) (1079 0) (1080 0) (1081 1031) (1082 0) (1083 1) (1084 1031) (1085 4) (1086 t))
run: 32 full? 11: (reply (11 boolean))
m: (11 boolean)
sz: (11 boolean)
addr: (11 boolean)
addr: initial result: 11
addr: incrementing by 1076
reply: ((11 boolean)) ((3 boolean))
reply: nil => (3 boolean)
setm: (3 boolean) <= nil
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 3 to nil
