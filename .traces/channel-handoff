c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((chan channel-address) <- new-channel (3 literal)) -- nil
c{0: 2 (fork (f2 fn) (chan channel-address)) -- nil
c{0: 3 ((1 integer global) <- read (chan channel-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new-channel ((chan channel-address))
c{1: 2 fork nil
c{1: 3 read ((1 integer global))
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((chan channel-address) <- new-channel (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (chan channel-address)
maybe-add: (chan channel-address)
cn0: location for arg (chan channel-address): 1
sizeof: channel-address
cn0: (fork (f2 fn) (chan channel-address)) ((chan 1)) nil
maybe-add: (f2 fn)
maybe-add: (chan channel-address)
cn0: ((1 integer global) <- read (chan channel-address deref)) ((chan 1)) nil
maybe-add: (chan channel-address deref)
cn0: checking (1 integer global)
maybe-add: (1 integer global)
cn1: update names ((chan 1)) nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((n integer-address) <- new (integer literal)) -- nil
c{0: 2 ((n integer-address deref) <- copy (24 literal)) -- nil
c{0: 3 ((ochan channel-address) <- arg) -- nil
c{0: 4 ((x tagged-value-address) <- new-tagged-value (integer-address literal) (n integer-address)) -- nil
c{0: 5 ((ochan channel-address deref) <- write (ochan channel-address deref) (x tagged-value-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((n integer-address))
c{1: 2 copy ((n integer-address deref))
c{1: 3 arg ((ochan channel-address))
c{1: 4 new-tagged-value ((x tagged-value-address))
c{1: 5 write ((ochan channel-address deref))
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((n integer-address) <- new (integer literal)) nil nil
maybe-add: (integer literal)
cn0: checking (n integer-address)
maybe-add: (n integer-address)
cn0: location for arg (n integer-address): 1
sizeof: integer-address
cn0: ((n integer-address deref) <- copy (24 literal)) ((n 1)) nil
maybe-add: (24 literal)
cn0: checking (n integer-address deref)
maybe-add: (n integer-address deref)
cn0: ((ochan channel-address) <- arg) ((n 1)) nil
cn0: checking (ochan channel-address)
maybe-add: (ochan channel-address)
cn0: location for arg (ochan channel-address): 2
sizeof: channel-address
cn0: ((x tagged-value-address) <- new-tagged-value (integer-address literal) (n integer-address)) ((n 1) (ochan 2)) nil
maybe-add: (integer-address literal)
maybe-add: (n integer-address)
cn0: checking (x tagged-value-address)
maybe-add: (x tagged-value-address)
cn0: location for arg (x tagged-value-address): 3
sizeof: tagged-value-address
cn0: ((ochan channel-address deref) <- write (ochan channel-address deref) (x tagged-value-address deref)) ((n 1) (ochan 2) (x 3)) nil
maybe-add: (ochan channel-address deref)
maybe-add: (x tagged-value-address deref)
cn0: checking (ochan channel-address deref)
maybe-add: (ochan channel-address deref)
cn1: update names ((n 1) (ochan 2) (x 3)) nil
schedule: f1
run: -- nil
run: 1 f1 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 2 f1 1: ((1 channel-address) <- new-channel (3 literal))
run: -- ((1000 30))
run: 3 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1031 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1031 30))
run: 4 new-channel 1: ((1 channel-address) <- new (channel literal))
sizeof: channel
sizeof: boolean
sizeof: boolean
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: 1062 => (1 channel-address)
setm: (1 channel-address) <= 1062
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1031
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1032 to 1062
run: -- ((1000 30) (1031 30) (1032 1062))
run: 5 new-channel 2: ((2 integer-address) <- get-address (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1031
addr: deref 1032 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (2 offset) => 1064
run: 1064 => (2 integer-address)
setm: (2 integer-address) <= 1064
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
addr: incrementing by 1031
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 1033 to 1064
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064))
run: 6 new-channel 3: ((2 integer-address deref) <- copy (0 literal))
run: 0 => (2 integer-address deref)
setm: (2 integer-address deref) <= 0
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1031
sz: (1064 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: incrementing by 1031
addr: deref 1033 => 1064
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1064 to 0
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064) (1064 0))
run: 7 new-channel 4: ((3 integer-address) <- get-address (1 channel-address deref) (3 offset))
record-info: (1 channel-address deref) (3 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1031
addr: deref 1032 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (3 offset) => 1065
run: 1065 => (3 integer-address)
setm: (3 integer-address) <= 1065
sz: (3 integer-address)
addr: (3 integer-address)
addr: initial result: 3
addr: incrementing by 1031
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 1034 to 1065
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1064 0))
run: 8 new-channel 5: ((3 integer-address deref) <- copy (0 literal))
run: 0 => (3 integer-address deref)
setm: (3 integer-address deref) <= 0
sz: (3 integer-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1031
sz: (1065 integer)
addr: (3 integer-address deref)
addr: initial result: 3
addr: incrementing by 1031
addr: deref 1034 => 1065
setm: size of (3 integer-address deref) is 1
setm: (3 integer-address deref): setting 1065 to 0
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1064 0) (1065 0))
run: 9 new-channel 6: ((4 integer) <- arg)
arg: nil 0 (3)
run: 3 => (4 integer)
setm: (4 integer) <= 3
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
setm: size of (4 integer) is 1
setm: (4 integer): setting 1035 to 3
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 3) (1064 0) (1065 0))
run: 10 new-channel 7: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
add: 3 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
run: 4 => (4 integer)
setm: (4 integer) <= 4
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
setm: size of (4 integer) is 1
setm: (4 integer): setting 1035 to 4
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1064 0) (1065 0))
run: 11 new-channel 8: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (4 offset))
record-info: (1 channel-address deref) (4 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1031
addr: deref 1032 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel-address deref) (4 offset) => 1066
run: 1066 => (5 tagged-value-array-address-address)
setm: (5 tagged-value-array-address-address) <= 1066
sz: (5 tagged-value-array-address-address)
addr: (5 tagged-value-array-address-address)
addr: initial result: 5
addr: incrementing by 1031
setm: size of (5 tagged-value-array-address-address) is 1
setm: (5 tagged-value-array-address-address): setting 1036 to 1066
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0))
run: 12 new-channel 9: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1067 => (5 tagged-value-array-address-address deref)
setm: (5 tagged-value-array-address-address deref) <= 1067
sz: (5 tagged-value-array-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1031
sz: (1066 tagged-value-array-address)
addr: (5 tagged-value-array-address-address deref)
addr: initial result: 5
addr: incrementing by 1031
addr: deref 1036 => 1066
setm: size of (5 tagged-value-array-address-address deref) is 1
setm: (5 tagged-value-array-address-address deref): setting 1066 to 1067
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4))
run: 13 new-channel 10: (reply (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1031
reply: ((1 channel-address)) ((1 channel-address))
reply: 1062 => (1 channel-address)
setm: (1 channel-address) <= 1062
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1001 to 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4))
run: 14 f1 2: (fork (f2 fn) (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4))
run: 15 f1 3: ((1 integer global) <- read (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1000
sz: (1062 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4))
run: 16 read 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1076 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30))
run: 17 read 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1067 . nil)))
run: #(tagged record (nil nil 0 0 1067 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (nil nil 0 0 1067 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
setm: size of (1 channel) is 5
setm: (1 channel): setting 1077 to nil
setm: (1 channel): setting 1078 to nil
setm: (1 channel): setting 1079 to 0
setm: (1 channel): setting 1080 to 0
setm: (1 channel): setting 1081 to 1067
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067))
run: 18 read 2: ((6 boolean) <- empty? (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067))
run: 19 empty? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1107 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1107 30))
run: 20 empty? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1067 . nil)))
run: #(tagged record (nil nil 0 0 1067 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (nil nil 0 0 1067 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1107
setm: size of (1 channel) is 5
setm: (1 channel): setting 1108 to nil
setm: (1 channel): setting 1109 to nil
setm: (1 channel): setting 1110 to 0
setm: (1 channel): setting 1111 to 0
setm: (1 channel): setting 1112 to 1067
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1107 30) (1110 0) (1111 0) (1112 1067))
run: 21 empty? 2: ((6 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1107
record-info: initial base 1108 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1110 integer
m: (1110 integer global)
sz: (1110 integer global)
addr: (1110 integer global)
addr: initial result: 1110
run: 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1107
setm: size of (6 integer) is 1
setm: (6 integer): setting 1113 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0))
run: 22 empty? 3: ((7 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1107
record-info: initial base 1108 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1111 integer
m: (1111 integer global)
sz: (1111 integer global)
addr: (1111 integer global)
addr: initial result: 1111
run: 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1107
setm: size of (7 integer) is 1
setm: (7 integer): setting 1114 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0))
run: 23 empty? 4: ((8 boolean) <- eq (6 integer) (7 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1107
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1107
run: t => (8 boolean)
setm: (8 boolean) <= t
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1107
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1115 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t))
run: 24 empty? 5: (reply (8 boolean))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1107
reply: ((8 boolean)) ((6 boolean))
reply: t => (6 boolean)
setm: (6 boolean) <= t
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1076
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1082 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t))
run: 25 read 3: (jump-unless (6 boolean) (3 offset))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1076
jump: checking that t is not t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t))
run: 26 read 4: ((7 boolean-address) <- get-address (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1076
record-info: initial base 1077 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (0 offset) => 1077
run: 1077 => (7 boolean-address)
setm: (7 boolean-address) <= 1077
sz: (7 boolean-address)
addr: (7 boolean-address)
addr: initial result: 7
addr: incrementing by 1076
setm: size of (7 boolean-address) is 1
setm: (7 boolean-address): setting 1083 to 1077
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t))
run: 27 read 5: ((7 boolean-address deref) <- copy (nil literal))
run: nil => (7 boolean-address deref)
setm: (7 boolean-address deref) <= nil
sz: (7 boolean-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1076
sz: (1077 boolean)
addr: (7 boolean-address deref)
addr: initial result: 7
addr: incrementing by 1076
addr: deref 1083 => 1077
setm: size of (7 boolean-address deref) is 1
setm: (7 boolean-address deref): setting 1077 to nil
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t))
run: 28 read 6: (sleep (7 boolean-address deref))
schedule: pushing read to sleep queue
m: (7 boolean-address deref)
sz: (7 boolean-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1076
sz: (1077 boolean)
addr: (7 boolean-address deref)
addr: initial result: 7
addr: incrementing by 1076
addr: deref 1083 => 1077
schedule: f2
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t))
run: 29 f2 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1138 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30))
run: 30 f2 1: ((1 integer-address) <- new (integer literal))
sizeof: integer
run: 1169 => (1 integer-address)
setm: (1 integer-address) <= 1169
sz: (1 integer-address)
addr: (1 integer-address)
addr: initial result: 1
addr: incrementing by 1138
setm: size of (1 integer-address) is 1
setm: (1 integer-address): setting 1139 to 1169
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169))
run: 31 f2 2: ((1 integer-address deref) <- copy (24 literal))
run: 24 => (1 integer-address deref)
setm: (1 integer-address deref) <= 24
sz: (1 integer-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1138
sz: (1169 integer)
addr: (1 integer-address deref)
addr: initial result: 1
addr: incrementing by 1138
addr: deref 1139 => 1169
setm: size of (1 integer-address deref) is 1
setm: (1 integer-address deref): setting 1169 to 24
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1169 24))
run: 32 f2 3: ((2 channel-address) <- arg)
arg: nil 0 (1062)
run: 1062 => (2 channel-address)
setm: (2 channel-address) <= 1062
sz: (2 channel-address)
addr: (2 channel-address)
addr: initial result: 2
addr: incrementing by 1138
setm: size of (2 channel-address) is 1
setm: (2 channel-address): setting 1140 to 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24))
run: 33 f2 4: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address))
m: (1 integer-address)
sz: (1 integer-address)
addr: (1 integer-address)
addr: initial result: 1
addr: incrementing by 1138
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24))
run: 34 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1170 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30))
run: 35 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 1169)
run: integer-address => (1 type)
setm: (1 type) <= integer-address
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1170
setm: size of (1 type) is 1
setm: (1 type): setting 1171 to integer-address
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address))
run: 36 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1170
sizeof: integer-address
run: 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1170
setm: size of (2 integer) is 1
setm: (2 integer): setting 1172 to 1
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1))
run: 37 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1170
run: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1170
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1173 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t))
run: 38 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1170
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t))
run: 39 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1201 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1201
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1170
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1174 to 1201
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201))
run: 40 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1170
addr: deref 1174 => 1201
record-info: initial base 1201 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1201
run: 1201 => (5 location)
setm: (5 location) <= 1201
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1170
setm: size of (5 location) is 1
setm: (5 location): setting 1175 to 1201
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201))
run: 41 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1170
run: integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1170
sz: (1201 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1170
addr: deref 1175 => 1201
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1201 to integer-address
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1201 integer-address))
run: 42 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1170
addr: deref 1174 => 1201
record-info: initial base 1201 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1202
run: 1202 => (6 location)
setm: (6 location) <= 1202
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1170
setm: size of (6 location) is 1
setm: (6 location): setting 1176 to 1202
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address))
run: 43 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 1169)
run: 1169 => (6 location deref)
setm: (6 location deref) <= 1169
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1170
sz: (1202 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1170
addr: deref 1176 => 1202
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1202 to 1169
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169))
run: 44 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1170
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1201 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1201
sz: (3 tagged-value-address)
addr: (3 tagged-value-address)
addr: initial result: 3
addr: incrementing by 1138
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 1141 to 1201
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169))
run: 45 f2 5: ((2 channel-address deref) <- write (2 channel-address deref) (3 tagged-value-address deref))
m: (2 channel-address deref)
sz: (2 channel-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1138
sz: (1062 channel)
addr: (2 channel-address deref)
addr: initial result: 2
addr: incrementing by 1138
addr: deref 1140 => 1062
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1138
sz: (1201 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: incrementing by 1138
addr: deref 1141 => 1201
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169))
run: 46 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1203 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30))
run: 47 write 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1067 . nil)) #(tagged record (integer-address 1169 . nil)))
run: #(tagged record (nil nil 0 0 1067 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (nil nil 0 0 1067 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1203
setm: size of (1 channel) is 5
setm: (1 channel): setting 1204 to nil
setm: (1 channel): setting 1205 to nil
setm: (1 channel): setting 1206 to 0
setm: (1 channel): setting 1207 to 0
setm: (1 channel): setting 1208 to 1067
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067))
run: 48 write 2: ((6 tagged-value) <- arg)
arg: nil 1 (#(tagged record (nil nil 0 0 1067 . nil)) #(tagged record (integer-address 1169 . nil)))
run: #(tagged record (integer-address 1169 . nil)) => (6 tagged-value)
setm: (6 tagged-value) <= #(tagged record (integer-address 1169 . nil))
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1203
setm: size of (6 tagged-value) is 2
setm: (6 tagged-value): setting 1209 to integer-address
setm: (6 tagged-value): setting 1210 to 1169
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169))
run: 49 write 3: ((8 boolean) <- full? (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1203
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169))
run: 50 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1234 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30))
run: 51 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1067 . nil)))
run: #(tagged record (nil nil 0 0 1067 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (nil nil 0 0 1067 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1234
setm: size of (1 channel) is 5
setm: (1 channel): setting 1235 to nil
setm: (1 channel): setting 1236 to nil
setm: (1 channel): setting 1237 to 0
setm: (1 channel): setting 1238 to 0
setm: (1 channel): setting 1239 to 1067
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067))
run: 52 full? 2: ((6 integer) <- get (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1234
record-info: initial base 1235 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (3 offset) => 1238 integer
m: (1238 integer global)
sz: (1238 integer global)
addr: (1238 integer global)
addr: initial result: 1238
run: 0 => (6 integer)
setm: (6 integer) <= 0
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1234
setm: size of (6 integer) is 1
setm: (6 integer): setting 1240 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 0))
run: 53 full? 3: ((6 integer) <- add (6 integer) (1 literal))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1234
add: 0 1
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1234
run: 1 => (6 integer)
setm: (6 integer) <= 1
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1234
setm: size of (6 integer) is 1
setm: (6 integer): setting 1240 to 1
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1))
run: 54 full? 4: ((7 integer) <- capacity (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1234
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1))
run: 55 capacity 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1265 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1265 30))
run: 56 capacity 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (nil nil 0 0 1067 . nil)))
run: #(tagged record (nil nil 0 0 1067 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (nil nil 0 0 1067 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1265
setm: size of (1 channel) is 5
setm: (1 channel): setting 1266 to nil
setm: (1 channel): setting 1267 to nil
setm: (1 channel): setting 1268 to 0
setm: (1 channel): setting 1269 to 0
setm: (1 channel): setting 1270 to 1067
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1265 30) (1268 0) (1269 0) (1270 1067))
run: 57 capacity 2: ((6 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1265
record-info: initial base 1266 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1270 tagged-value-array-address
m: (1270 tagged-value-array-address global)
sz: (1270 tagged-value-array-address global)
addr: (1270 tagged-value-array-address global)
addr: initial result: 1270
run: 1067 => (6 tagged-value-array-address)
setm: (6 tagged-value-array-address) <= 1067
sz: (6 tagged-value-array-address)
addr: (6 tagged-value-array-address)
addr: initial result: 6
addr: incrementing by 1265
setm: size of (6 tagged-value-array-address) is 1
setm: (6 tagged-value-array-address): setting 1271 to 1067
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067))
run: 58 capacity 3: ((7 integer) <- len (6 tagged-value-array-address deref))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1265
sz: (1067 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1265
addr: deref 1271 => 1067
run: 4 => (7 integer)
setm: (7 integer) <= 4
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1265
setm: size of (7 integer) is 1
setm: (7 integer): setting 1272 to 4
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 59 capacity 4: (reply (7 integer))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1265
reply: ((7 integer)) ((7 integer))
reply: 4 => (7 integer)
setm: (7 integer) <= 4
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1234
setm: size of (7 integer) is 1
setm: (7 integer): setting 1241 to 4
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 60 full? 5: ((8 boolean) <- lt (6 integer) (7 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1234
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1234
run: t => (8 boolean)
setm: (8 boolean) <= t
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1234
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1242 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 61 full? 6: (jump-if (8 boolean) (1 offset))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1234
jump: checking that t is t
jump: jumping to 8
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 62 full? 8: ((9 integer) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1234
record-info: initial base 1235 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (2 offset) => 1237 integer
m: (1237 integer global)
sz: (1237 integer global)
addr: (1237 integer global)
addr: initial result: 1237
run: 0 => (9 integer)
setm: (9 integer) <= 0
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1234
setm: size of (9 integer) is 1
setm: (9 integer): setting 1243 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 63 full? 9: ((10 boolean) <- eq (9 integer) (6 integer))
m: (9 integer)
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1234
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1234
run: nil => (10 boolean)
setm: (10 boolean) <= nil
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1234
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1244 to nil
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 64 full? 10: (reply (10 boolean))
m: (10 boolean)
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1234
reply: ((10 boolean)) ((8 boolean))
reply: nil => (8 boolean)
setm: (8 boolean) <= nil
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1203
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1211 to nil
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 65 write 4: (jump-unless (8 boolean) (3 offset))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1203
jump: checking that nil is not t
jump: jumping to 8
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 66 write 8: ((10 tagged-value-array-address) <- get (1 channel) (4 offset))
record-info: (1 channel) (4 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1203
record-info: initial base 1204 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get: (1 channel) (4 offset) => 1208 tagged-value-array-address
m: (1208 tagged-value-array-address global)
sz: (1208 tagged-value-array-address global)
addr: (1208 tagged-value-array-address global)
addr: initial result: 1208
run: 1067 => (10 tagged-value-array-address)
setm: (10 tagged-value-array-address) <= 1067
sz: (10 tagged-value-array-address)
addr: (10 tagged-value-array-address)
addr: initial result: 10
addr: incrementing by 1203
setm: size of (10 tagged-value-array-address) is 1
setm: (10 tagged-value-array-address): setting 1213 to 1067
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 67 write 9: ((11 integer-address) <- get-address (1 channel) (3 offset))
record-info: (1 channel) (3 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1203
record-info: initial base 1204 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (3 offset) => 1207
run: 1207 => (11 integer-address)
setm: (11 integer-address) <= 1207
sz: (11 integer-address)
addr: (11 integer-address)
addr: initial result: 11
addr: incrementing by 1203
setm: size of (11 integer-address) is 1
setm: (11 integer-address): setting 1214 to 1207
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1214 1207) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 68 write 10: ((12 tagged-value-address) <- index-address (10 tagged-value-array-address deref) (11 integer-address deref))
array-info: (10 tagged-value-array-address deref) (11 integer-address deref)
addr: (10 tagged-value-array-address deref)
addr: initial result: 10
addr: incrementing by 1203
addr: deref 1213 => 1067
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1203
sz: (1207 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1203
addr: deref 1214 => 1207
array-info: initial base 1067 type ((address t) (elem tagged-value-array) (size 1))
array-info: (10 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (10 tagged-value-array-address deref)
m: (10 integer-address deref)
sz: (10 integer-address deref)
m: (10 location)
sz: (10 location)
addr: (10 location)
addr: initial result: 10
addr: incrementing by 1203
sz: (1067 integer)
addr: (10 integer-address deref)
addr: initial result: 10
addr: incrementing by 1203
addr: deref 1213 => 1067
array-info: array-len of (10 tagged-value-array-address deref) is 4
index-address: (10 tagged-value-array-address deref) (11 integer-address deref) => 1068
run: 1068 => (12 tagged-value-address)
setm: (12 tagged-value-address) <= 1068
sz: (12 tagged-value-address)
addr: (12 tagged-value-address)
addr: initial result: 12
addr: incrementing by 1203
setm: size of (12 tagged-value-address) is 1
setm: (12 tagged-value-address): setting 1215 to 1068
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1214 1207) (1215 1068) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 69 write 11: ((12 tagged-value-address deref) <- copy (6 tagged-value))
m: (6 tagged-value)
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1203
run: #(tagged record (integer-address 1169 . nil)) => (12 tagged-value-address deref)
setm: (12 tagged-value-address deref) <= #(tagged record (integer-address 1169 . nil))
sz: (12 tagged-value-address deref)
m: (12 location)
sz: (12 location)
addr: (12 location)
addr: initial result: 12
addr: incrementing by 1203
sz: (1068 tagged-value)
addr: (12 tagged-value-address deref)
addr: initial result: 12
addr: incrementing by 1203
addr: deref 1215 => 1068
setm: size of (12 tagged-value-address deref) is 2
setm: (12 tagged-value-address deref): setting 1068 to integer-address
setm: (12 tagged-value-address deref): setting 1069 to 1169
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1068 integer-address) (1069 1169) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 0) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1214 1207) (1215 1068) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 70 write 12: ((11 integer-address deref) <- add (11 integer-address deref) (1 literal))
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1203
sz: (1207 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1203
addr: deref 1214 => 1207
add: 0 1
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1203
sz: (1207 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1203
addr: deref 1214 => 1207
run: 1 => (11 integer-address deref)
setm: (11 integer-address deref) <= 1
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1203
sz: (1207 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1203
addr: deref 1214 => 1207
setm: size of (11 integer-address deref) is 1
setm: (11 integer-address deref): setting 1207 to 1
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1068 integer-address) (1069 1169) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 1) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1214 1207) (1215 1068) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 71 write 13: ((13 integer) <- len (10 tagged-value-array-address deref))
array-len: (10 tagged-value-array-address deref)
m: (10 integer-address deref)
sz: (10 integer-address deref)
m: (10 location)
sz: (10 location)
addr: (10 location)
addr: initial result: 10
addr: incrementing by 1203
sz: (1067 integer)
addr: (10 integer-address deref)
addr: initial result: 10
addr: incrementing by 1203
addr: deref 1213 => 1067
run: 4 => (13 integer)
setm: (13 integer) <= 4
sz: (13 integer)
addr: (13 integer)
addr: initial result: 13
addr: incrementing by 1203
setm: size of (13 integer) is 1
setm: (13 integer): setting 1216 to 4
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1068 integer-address) (1069 1169) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 1) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1214 1207) (1215 1068) (1216 4) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 72 write 14: ((14 boolean) <- lt (11 integer-address deref) (13 integer))
m: (11 integer-address deref)
sz: (11 integer-address deref)
m: (11 location)
sz: (11 location)
addr: (11 location)
addr: initial result: 11
addr: incrementing by 1203
sz: (1207 integer)
addr: (11 integer-address deref)
addr: initial result: 11
addr: incrementing by 1203
addr: deref 1214 => 1207
m: (13 integer)
sz: (13 integer)
addr: (13 integer)
addr: initial result: 13
addr: incrementing by 1203
run: t => (14 boolean)
setm: (14 boolean) <= t
sz: (14 boolean)
addr: (14 boolean)
addr: initial result: 14
addr: incrementing by 1203
setm: size of (14 boolean) is 1
setm: (14 boolean): setting 1217 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1068 integer-address) (1069 1169) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 1) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1214 1207) (1215 1068) (1216 4) (1217 t) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 73 write 15: (jump-if (14 boolean) (1 offset))
m: (14 boolean)
sz: (14 boolean)
addr: (14 boolean)
addr: initial result: 14
addr: incrementing by 1203
jump: checking that t is t
jump: jumping to 17
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1068 integer-address) (1069 1169) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 1) (1208 1067) (1209 integer-address) (1210 1169) (1213 1067) (1214 1207) (1215 1068) (1216 4) (1217 t) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 74 write 17: ((9 boolean-address) <- get-address (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1203
record-info: initial base 1204 type ((elems (boolean boolean integer integer tagged-value-array-address)) (fields (write-watch read-watch first-full first-free circular-buffer)) (record t) (size 5))
get-address: (1 channel) (0 offset) => 1204
run: 1204 => (9 boolean-address)
setm: (9 boolean-address) <= 1204
sz: (9 boolean-address)
addr: (9 boolean-address)
addr: initial result: 9
addr: incrementing by 1203
setm: size of (9 boolean-address) is 1
setm: (9 boolean-address): setting 1212 to 1204
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1068 integer-address) (1069 1169) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1206 0) (1207 1) (1208 1067) (1209 integer-address) (1210 1169) (1212 1204) (1213 1067) (1214 1207) (1215 1068) (1216 4) (1217 t) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 75 write 18: ((9 boolean-address deref) <- copy (t literal))
run: t => (9 boolean-address deref)
setm: (9 boolean-address deref) <= t
sz: (9 boolean-address deref)
m: (9 location)
sz: (9 location)
addr: (9 location)
addr: initial result: 9
addr: incrementing by 1203
sz: (1204 boolean)
addr: (9 boolean-address deref)
addr: initial result: 9
addr: incrementing by 1203
addr: deref 1212 => 1204
setm: size of (9 boolean-address deref) is 1
setm: (9 boolean-address deref): setting 1204 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1064) (1034 1065) (1035 4) (1036 1066) (1064 0) (1065 0) (1066 1067) (1067 4) (1068 integer-address) (1069 1169) (1076 30) (1079 0) (1080 0) (1081 1067) (1082 t) (1083 1077) (1107 30) (1110 0) (1111 0) (1112 1067) (1113 0) (1114 0) (1115 t) (1138 30) (1139 1169) (1140 1062) (1141 1201) (1169 24) (1170 30) (1171 integer-address) (1172 1) (1173 t) (1174 1201) (1175 1201) (1176 1202) (1201 integer-address) (1202 1169) (1203 30) (1204 t) (1206 0) (1207 1) (1208 1067) (1209 integer-address) (1210 1169) (1212 1204) (1213 1067) (1214 1207) (1215 1068) (1216 4) (1217 t) (1234 30) (1237 0) (1238 0) (1239 1067) (1240 1) (1241 4) (1242 t) (1243 0) (1265 30) (1268 0) (1269 0) (1270 1067) (1271 1067) (1272 4))
run: 76 write 19: (reply (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1203
reply: ((1 channel)) ((2 channel-address deref))
reply: #(tagged record (t nil 0 1 1067 . nil)) => (2 channel-address deref)
setm: (2 channel-address deref) <= #(tagged record (t nil 0 1 1067 . nil))
sz: (2 channel-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1138
sz: (1062 channel)
addr: (2 channel-address deref)
addr: initial result: 2
addr: incrementing by 1138
addr: deref 1140 => 1062
setm: size of (2 channel-address deref) is 5
setm: (2 channel-address deref): setting 1062 to t
setm: (2 channel-address deref): setting 1063 to nil
setm: (2 channel-address deref): setting 1064 to 0
setm: (2 channel-address deref): setting 1065 to 1
setm: (2 channel-address deref): setting 1066 to 1067
schedule: done with #(tagged routine #hash())
m: (7 boolean-address deref)
sz: (7 boolean-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1076
sz: (1077 boolean)
addr: (7 boolean-address deref)
addr: initial result: 7
addr: incrementing by 1076
addr: deref 1083 => 1077
